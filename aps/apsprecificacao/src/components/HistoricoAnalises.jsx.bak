import { useState, useMemo } from 'react';
import { LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { TrendingUp, TrendingDown, Calendar, Filter, BarChart3, PieChart as PieChartIcon, Activity } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';


import { 
  CANAIS_VENDA,
  CATEGORIAS_INGREDIENTES,
  CATEGORIAS_RECEITAS,
  formatarMoeda,
  formatarPorcentagem,
  formatarData
} from '../lib/data';

const HistoricoAnalises = ({ dados }) => {
  const { ingredientes = [], receitas = [], precificacao = [] } = dados;
  const [periodoFiltro, setPeriodoFiltro] = useState('30'); // dias
  const [categoriaFiltro, setCategoriaFiltro] = useState('todos');

  // Calcular data limite baseada no filtro
  const dataLimite = useMemo(() => {
    const hoje = new Date();
    const dias = parseInt(periodoFiltro);
    return new Date(hoje.getTime() - (dias * 24 * 60 * 60 * 1000));
  }, [periodoFiltro]);

  // Filtrar dados por período
  const ingredientesFiltrados = useMemo(() => {
    return ingredientes.filter(ing => {
      const dataAtualizacao = new Date(ing.dataAtualizacao);
      const matchPeriodo = dataAtualizacao >= dataLimite;
      const matchCategoria = categoriaFiltro === 'todos' || ing.categoria === categoriaFiltro;
      return matchPeriodo && matchCategoria;
    });
  }, [ingredientes, dataLimite, categoriaFiltro]);

  // Preparar dados para gráficos
  const dadosHistoricoPrecos = useMemo(() => {
    const historicoPorData = {};
    
    ingredientes.forEach(ing => {
      if (ing.historico && ing.historico.length > 0) {
        ing.historico.forEach(item => {
          const data = new Date(item.data);
          if (data >= dataLimite) {
            const dataStr = data.toISOString().split('T')[0];
            if (!historicoPorData[dataStr]) {
              historicoPorData[dataStr] = { data: dataStr, total: 0, count: 0 };
            }
            historicoPorData[dataStr].total += item.preco;
            historicoPorData[dataStr].count += 1;
          }
        });
      }
    });

    return Object.values(historicoPorData)
      .map(item => ({
        ...item,
        precoMedio: item.total / item.count
      }))
      .sort((a, b) => new Date(a.data) - new Date(b.data));
  }, [ingredientes, dataLimite]);

  // Dados de distribuição por categoria
  const dadosCategoriasIngredientes = useMemo(() => {
    const distribuicao = {};
    ingredientesFiltrados.forEach(ing => {
      distribuicao[ing.categoria] = (distribuicao[ing.categoria] || 0) + 1;
    });

    return Object.entries(distribuicao).map(([categoria, quantidade]) => ({
      categoria: categoria.charAt(0).toUpperCase() + categoria.slice(1),
      quantidade,
      valor: ingredientesFiltrados
        .filter(ing => ing.categoria === categoria)
        .reduce((acc, ing) => acc + ing.precoAtual, 0)
    }));
  }, [ingredientesFiltrados]);

  // Dados de receitas por categoria
  const dadosCategoriasReceitas = useMemo(() => {
    const distribuicao = {};
    receitas.forEach(rec => {
      distribuicao[rec.categoria] = (distribuicao[rec.categoria] || 0) + 1;
    });

    return Object.entries(distribuicao).map(([categoria, quantidade]) => ({
      categoria: categoria.charAt(0).toUpperCase() + categoria.slice(1),
      quantidade,
      custoMedio: receitas
        .filter(rec => rec.categoria === categoria)
        .reduce((acc, rec) => {
          const custos = Object.values(rec.tamanhos).map(t => t.custoTotal || 0);
          const custoMedio = custos.reduce((a, b) => a + b, 0) / custos.length;
          return acc + custoMedio;
        }, 0) / quantidade || 0
    }));
  }, [receitas]);

  // Análise de precificação por canal
  const dadosPrecificacaoCanais = useMemo(() => {
    const analiseCanais = {};
    
    Object.keys(CANAIS_VENDA).forEach(canalId => {
      analiseCanais[canalId] = {
        canal: CANAIS_VENDA[canalId].nome,
        cor: CANAIS_VENDA[canalId].cor,
        totalCalculos: 0,
        precoMedio: 0,
        margemMedia: 0,
        lucroMedio: 0
      };
    });

    precificacao.forEach(prec => {
      Object.entries(prec.canais).forEach(([canalId, dadosCanal]) => {
        if (analiseCanais[canalId]) {
          analiseCanais[canalId].totalCalculos += 1;
          analiseCanais[canalId].precoMedio += dadosCanal.precoSugerido;
          analiseCanais[canalId].margemMedia += dadosCanal.margemLiquida;
          analiseCanais[canalId].lucroMedio += dadosCanal.lucroLiquido;
        }
      });
    });

    return Object.values(analiseCanais)
      .filter(canal => canal.totalCalculos > 0)
      .map(canal => ({
        ...canal,
        precoMedio: canal.precoMedio / canal.totalCalculos,
        margemMedia: canal.margemMedia / canal.totalCalculos,
        lucroMedio: canal.lucroMedio / canal.totalCalculos
      }));
  }, [precificacao]);

  // Estatísticas gerais
  const estatisticas = useMemo(() => {
    const precoMedioIngredientes = ingredientesFiltrados.length > 0 
      ? ingredientesFiltrados.reduce((acc, ing) => acc + ing.precoAtual, 0) / ingredientesFiltrados.length 
      : 0;

    const custoMedioReceitas = receitas.length > 0
      ? receitas.reduce((acc, rec) => {
          const custos = Object.values(rec.tamanhos).map(t => t.custoTotal || 0);
          const custoMedio = custos.reduce((a, b) => a + b, 0) / custos.length;
          return acc + custoMedio;
        }, 0) / receitas.length
      : 0;

    const margemMediaGeral = dadosPrecificacaoCanais.length > 0
      ? dadosPrecificacaoCanais.reduce((acc, canal) => acc + canal.margemMedia, 0) / dadosPrecificacaoCanais.length
      : 0;

    return {
      precoMedioIngredientes,
      custoMedioReceitas,
      margemMediaGeral,
      totalCalculosPrecificacao: precificacao.length
    };
  }, [ingredientesFiltrados, receitas, dadosPrecificacaoCanais, precificacao]);

  const cores = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#00ff00', '#ff00ff', '#00ffff', '#ff0000'];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Histórico e Análises</h2>
          <p className="text-gray-600">Acompanhe a evolução dos custos e análises de precificação</p>
        </div>
      </div>

      {/* Filtros */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="w-full sm:w-48">
              <Select value={periodoFiltro} onValueChange={setPeriodoFiltro}>
                <SelectTrigger>
                  <Calendar className="h-4 w-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="7">Últimos 7 dias</SelectItem>
                  <SelectItem value="30">Últimos 30 dias</SelectItem>
                  <SelectItem value="90">Últimos 90 dias</SelectItem>
                  <SelectItem value="365">Último ano</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="w-full sm:w-48">
              <Select value={categoriaFiltro} onValueChange={setCategoriaFiltro}>
                <SelectTrigger>
                  <Filter className="h-4 w-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="todos">Todas as categorias</SelectItem>
                  {CATEGORIAS_INGREDIENTES.map(cat => (
                    <SelectItem key={cat.value} value={cat.value}>
                      {cat.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Estatísticas Gerais */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-gradient-to-r from-blue-500 to-blue-600 text-white">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm opacity-80">Preço Médio Ingredientes</p>
                <p className="text-2xl font-bold">{formatarMoeda(estatisticas.precoMedioIngredientes)}</p>
              </div>
              <TrendingUp className="h-8 w-8 opacity-80" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-green-500 to-green-600 text-white">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm opacity-80">Custo Médio Receitas</p>
                <p className="text-2xl font-bold">{formatarMoeda(estatisticas.custoMedioReceitas)}</p>
              </div>
              <Activity className="h-8 w-8 opacity-80" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-purple-500 to-purple-600 text-white">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm opacity-80">Margem Média Geral</p>
                <p className="text-2xl font-bold">{formatarPorcentagem(estatisticas.margemMediaGeral)}</p>
              </div>
              <BarChart3 className="h-8 w-8 opacity-80" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-orange-500 to-orange-600 text-white">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm opacity-80">Cálculos Realizados</p>
                <p className="text-2xl font-bold">{estatisticas.totalCalculosPrecificacao}</p>
              </div>
              <PieChartIcon className="h-8 w-8 opacity-80" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Gráficos e Análises */}
      <Tabs defaultValue="precos" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="precos">Evolução Preços</TabsTrigger>
          <TabsTrigger value="categorias">Categorias</TabsTrigger>
          <TabsTrigger value="canais">Análise Canais</TabsTrigger>
          <TabsTrigger value="receitas">Receitas</TabsTrigger>
        </TabsList>

        {/* Evolução de Preços */}
        <TabsContent value="precos" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <TrendingUp className="h-5 w-5 mr-2 text-blue-500" />
                Evolução do Preço Médio dos Ingredientes
              </CardTitle>
              <CardDescription>
                Acompanhe a variação dos preços ao longo do tempo
              </CardDescription>
            </CardHeader>
            <CardContent>
              {dadosHistoricoPrecos.length > 0 ? (
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={dadosHistoricoPrecos}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis 
                      dataKey="data" 
                      tickFormatter={(value) => new Date(value).toLocaleDateString('pt-BR')}
                    />
                    <YAxis tickFormatter={(value) => formatarMoeda(value)} />
                    <Tooltip 
                      labelFormatter={(value) => new Date(value).toLocaleDateString('pt-BR')}
                      formatter={(value) => [formatarMoeda(value), 'Preço Médio']}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="precoMedio" 
                      stroke="#8884d8" 
                      strokeWidth={2}
                      dot={{ fill: '#8884d8' }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <TrendingUp className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>Nenhum histórico de preços disponível para o período selecionado</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Análise por Categorias */}
        <TabsContent value="categorias" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Distribuição de Ingredientes por Categoria</CardTitle>
              </CardHeader>
              <CardContent>
                {dadosCategoriasIngredientes.length > 0 ? (
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={dadosCategoriasIngredientes}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ categoria, quantidade }) => `${categoria}: ${quantidade}`}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="quantidade"
                      >
                        {dadosCategoriasIngredientes.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={cores[index % cores.length]} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    <PieChartIcon className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>Nenhum dado de categoria disponível</p>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Valor Total por Categoria</CardTitle>
              </CardHeader>
              <CardContent>
                {dadosCategoriasIngredientes.length > 0 ? (
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={dadosCategoriasIngredientes}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="categoria" />
                      <YAxis tickFormatter={(value) => formatarMoeda(value)} />
                      <Tooltip formatter={(value) => [formatarMoeda(value), 'Valor Total']} />
                      <Bar dataKey="valor" fill="#82ca9d" />
                    </BarChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    <BarChart3 className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>Nenhum dado de valor disponível</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Análise de Canais */}
        <TabsContent value="canais" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Performance por Canal de Venda</CardTitle>
              <CardDescription>
                Comparação de preços médios e margens entre os canais
              </CardDescription>
            </CardHeader>
            <CardContent>
              {dadosPrecificacaoCanais.length > 0 ? (
                <ResponsiveContainer width="100%" height={400}>
                  <BarChart data={dadosPrecificacaoCanais}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="canal" />
                    <YAxis yAxisId="left" tickFormatter={(value) => formatarMoeda(value)} />
                    <YAxis yAxisId="right" orientation="right" tickFormatter={(value) => formatarPorcentagem(value)} />
                    <Tooltip 
                      formatter={(value, name) => {
                        if (name === 'Margem Média') return [formatarPorcentagem(value), name];
                        return [formatarMoeda(value), name];
                      }}
                    />
                    <Legend />
                    <Bar yAxisId="left" dataKey="precoMedio" fill="#8884d8" name="Preço Médio" />
                    <Bar yAxisId="left" dataKey="lucroMedio" fill="#82ca9d" name="Lucro Médio" />
                    <Line yAxisId="right" dataKey="margemMedia" stroke="#ff7300" name="Margem Média" />
                  </BarChart>
                </ResponsiveContainer>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <BarChart3 className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>Nenhum cálculo de precificação disponível</p>
                  <p className="text-sm mt-2">Realize alguns cálculos na aba Precificação para ver as análises</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Análise de Receitas */}
        <TabsContent value="receitas" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Receitas por Categoria</CardTitle>
              <CardDescription>
                Distribuição e custo médio das receitas por categoria
              </CardDescription>
            </CardHeader>
            <CardContent>
              {dadosCategoriasReceitas.length > 0 ? (
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={dadosCategoriasReceitas}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="categoria" />
                    <YAxis yAxisId="left" />
                    <YAxis yAxisId="right" orientation="right" tickFormatter={(value) => formatarMoeda(value)} />
                    <Tooltip 
                      formatter={(value, name) => {
                        if (name === 'Custo Médio') return [formatarMoeda(value), name];
                        return [value, name];
                      }}
                    />
                    <Legend />
                    <Bar yAxisId="left" dataKey="quantidade" fill="#8884d8" name="Quantidade" />
                    <Bar yAxisId="right" dataKey="custoMedio" fill="#82ca9d" name="Custo Médio" />
                  </BarChart>
                </ResponsiveContainer>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <Activity className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>Nenhuma receita cadastrada</p>
                  <p className="text-sm mt-2">Cadastre receitas na aba correspondente para ver as análises</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default HistoricoAnalises;
