<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pizzaria Pro - Sistema de Precificação</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logo h1 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .stats {
            display: flex;
            gap: 2rem;
        }

        .stat {
            text-align: center;
        }

        .stat-value {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .stat-label {
            font-size: 0.8rem;
            opacity: 0.9;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background: white;
            min-height: calc(100vh - 100px);
        }

        .tabs {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .tab {
            padding: 0.75rem 1.5rem;
            border: none;
            background: #f8f9fa;
            color: #666;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .tab:hover {
            background: #e9ecef;
            transform: translateY(-2px);
        }

        .tab.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-color: #5a67d8;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #333;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #555;
        }

        .form-group input,
        .form-group select {
            padding: 0.75rem;
            border: 2px solid #e1e5e9;
            border-radius: 6px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-info {
            background: #17a2b8;
            color: white;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .table th,
        .table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e1e5e9;
        }

        .table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #555;
        }

        .table tr:hover {
            background: #f8f9fa;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid #e1e5e9;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            border-left: 4px solid;
        }

        .alert-warning {
            background: #fff3cd;
            border-color: #ffc107;
            color: #856404;
        }

        .alert-success {
            background: #d4edda;
            border-color: #28a745;
            color: #155724;
        }

        .alert-info {
            background: #d1ecf1;
            border-color: #17a2b8;
            color: #0c5460;
        }

        .badge {
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .badge-success {
            background: #28a745;
            color: white;
        }

        .badge-warning {
            background: #ffc107;
            color: #212529;
        }

        .badge-danger {
            background: #dc3545;
            color: white;
        }

        .badge-info {
            background: #17a2b8;
            color: white;
        }

        .pricing-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .pricing-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 2px solid #e1e5e9;
        }

        .pricing-card h3 {
            margin-bottom: 1rem;
            color: #333;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .price-display {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
            margin: 1rem 0;
        }

        .margin-info {
            font-size: 0.9rem;
            color: #666;
        }

        .simulator-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin: 2rem 0;
        }

        .simulator-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .simulator-result {
            background: rgba(255, 255, 255, 0.1);
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
        }

        .result-value {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .result-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .analysis-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .analysis-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-left: 4px solid;
        }

        .analysis-card.orange {
            border-left-color: #ff6b35;
        }

        .analysis-card.blue {
            border-left-color: #4dabf7;
        }

        .analysis-card.green {
            border-left-color: #51cf66;
        }

        .analysis-card.purple {
            border-left-color: #9775fa;
        }

        .import-export-section {
            background: #f8f9fa;
            padding: 2rem;
            border-radius: 12px;
            margin: 2rem 0;
        }

        .import-export-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
        }

        .file-input {
            display: none;
        }

        .file-label {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: #6c757d;
            color: white;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .file-label:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        .footer {
            text-align: center;
            padding: 2rem;
            color: #666;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .stats {
                gap: 1rem;
            }

            .container {
                padding: 1rem;
            }

            .tabs {
                flex-direction: column;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="logo">
                <span style="font-size: 1.5rem;">🍕</span>
                <div>
                    <h1>Pizzaria Pro</h1>
                    <p style="font-size: 0.9rem; opacity: 0.9;">Sistema Completo de Precificação</p>
                </div>
            </div>
            <div class="stats">
                <div class="stat">
                    <div class="stat-value" id="totalIngredientes">0</div>
                    <div class="stat-label">Ingredientes</div>
                </div>
                <div class="stat">
                    <div class="stat-value" id="totalReceitas">0</div>
                    <div class="stat-label">Receitas</div>
                </div>
                <div class="stat">
                    <div class="stat-value" id="totalAlertas">0</div>
                    <div class="stat-label">Alertas</div>
                </div>
                <div class="stat">
                    <div class="stat-value" id="custoMedio">R$ 0,00</div>
                    <div class="stat-label">Custo Médio</div>
                </div>
                <div class="stat">
                    <div class="stat-value">6</div>
                    <div class="stat-label">Canais</div>
                </div>
            </div>
        </div>
    </header>

    <div class="container">
        <div class="tabs">
            <button class="tab active" onclick="showTab('dashboard')">📊 Dashboard</button>
            <button class="tab" onclick="showTab('ingredientes')">🥘 Ingredientes</button>
            <button class="tab" onclick="showTab('receitas')">📝 Receitas</button>
            <button class="tab" onclick="showTab('custos')">💰 Custos</button>
            <button class="tab" onclick="showTab('precificacao')">💲 Precificação</button>
            <button class="tab" onclick="showTab('simulador')">🧮 Simulador</button>
            <button class="tab" onclick="showTab('analises')">📈 Análises</button>
            <button class="tab" onclick="showTab('importexport')">📤 Import/Export</button>
        </div>

        <!-- Dashboard -->
        <div id="dashboard" class="tab-content active">
            <div class="alert alert-warning" id="alertaConfiguracao">
                <strong>⚠️ Sistema Pronto para Configuração</strong><br>
                Configure custos operacionais, cadastre ingredientes e use o simulador de cenários para otimizar sua precificação.
            </div>

            <div class="cards-grid">
                <div class="card">
                    <h3>📊 Dashboard Inteligente</h3>
                    <p>Visão geral com KPIs avançados, alertas automáticos e sugestões inteligentes para otimização.</p>
                </div>
                <div class="card">
                    <h3>🥘 Gestão de Ingredientes</h3>
                    <p>CRUD completo com histórico de preços, fornecedores, unidades de medida e quantidade padrão por pizza.</p>
                </div>
                <div class="card">
                    <h3>📝 Gestão de Receitas</h3>
                    <p>Criação de receitas por tamanho com composição detalhada, cálculo automático de custos e análise de rentabilidade.</p>
                </div>
                <div class="card">
                    <h3>💰 Custos Operacionais</h3>
                    <p>Controle completo de custos fixos, impostos, meta de lucro e rateio automático por volume de vendas.</p>
                </div>
                <div class="card">
                    <h3>💲 Precificação Avançada</h3>
                    <p>Sistema inteligente para 6 canais com cálculo detalhado, margem real, lucro líquido e comparação automática.</p>
                </div>
                <div class="card">
                    <h3>🧮 Simulador de Cenários</h3>
                    <p>Análise de sensibilidade com diferentes cenários, ponto de equilíbrio e simulação de vendas.</p>
                </div>
                <div class="card">
                    <h3>📈 Análises Profissionais</h3>
                    <p>Relatórios executivos, histórico de preços, análise de rentabilidade e insights para otimização.</p>
                </div>
                <div class="card">
                    <h3>📤 Import/Export</h3>
                    <p>Sistema completo de backup e restauração de dados em Excel, CSV e JSON para continuidade do trabalho.</p>
                </div>
            </div>
        </div>

        <!-- Ingredientes -->
        <div id="ingredientes" class="tab-content">
            <h2 class="section-title">🥘 Gestão de Ingredientes</h2>
            <p>Cadastre ingredientes com histórico de preços e quantidade padrão por pizza.</p>

            <div class="form-grid">
                <div class="form-group">
                    <label>Nome do Ingrediente</label>
                    <input type="text" id="nomeIngrediente" placeholder="Ex: Mussarela">
                </div>
                <div class="form-group">
                    <label>Unidade de Medida</label>
                    <select id="unidadeIngrediente">
                        <option value="kg">Quilograma (kg)</option>
                        <option value="g">Gramas (g)</option>
                        <option value="l">Litros (l)</option>
                        <option value="ml">Mililitros (ml)</option>
                        <option value="un">Unidade</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Preço por Unidade (R$)</label>
                    <input type="number" id="precoIngrediente" step="0.01" placeholder="0,00">
                </div>
                <div class="form-group">
                    <label>Quantidade por Pizza (padrão)</label>
                    <input type="number" id="quantidadeIngrediente" step="0.001" placeholder="Ex: 0,15">
                </div>
                <div class="form-group">
                    <label>Fornecedor</label>
                    <input type="text" id="fornecedorIngrediente" placeholder="Ex: Distribuidora ABC">
                </div>
                <div class="form-group">
                    <label>Categoria</label>
                    <select id="categoriaIngrediente">
                        <option value="queijos">Queijos</option>
                        <option value="carnes">Carnes</option>
                        <option value="vegetais">Vegetais</option>
                        <option value="molhos">Molhos</option>
                        <option value="massas">Massas</option>
                        <option value="temperos">Temperos</option>
                        <option value="outros">Outros</option>
                    </select>
                </div>
            </div>

            <div style="margin-bottom: 2rem;">
                <button class="btn btn-primary" onclick="adicionarIngrediente()">➕ Adicionar Ingrediente</button>
                <button class="btn btn-warning" onclick="atualizarPrecos()">📈 Atualizar Preços</button>
            </div>

            <table class="table" id="tabelaIngredientes">
                <thead>
                    <tr>
                        <th>Ingrediente</th>
                        <th>Unidade</th>
                        <th>Preço/Unidade</th>
                        <th>Histórico</th>
                        <th>Qtd/Pizza</th>
                        <th>Custo/Pizza</th>
                        <th>Fornecedor</th>
                        <th>Categoria</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="9" style="text-align: center; color: #666;">
                            Nenhum ingrediente cadastrado. Adicione ingredientes para começar.
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Receitas -->
        <div id="receitas" class="tab-content">
            <h2 class="section-title">📝 Gestão de Receitas</h2>
            <p>Crie receitas por tamanho com composição detalhada e cálculo automático de custos.</p>

            <div class="form-grid">
                <div class="form-group">
                    <label>Nome da Receita</label>
                    <input type="text" id="nomeReceita" placeholder="Ex: Pizza Margherita">
                </div>
                <div class="form-group">
                    <label>Tamanho</label>
                    <select id="tamanhoReceita">
                        <option value="P">Pequena (P)</option>
                        <option value="M">Média (M)</option>
                        <option value="G">Grande (G)</option>
                        <option value="GG">Gigante (GG)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Categoria</label>
                    <select id="categoriaReceita">
                        <option value="tradicional">Tradicional</option>
                        <option value="especial">Especial</option>
                        <option value="premium">Premium</option>
                        <option value="doce">Doce</option>
                    </select>
                </div>
            </div>

            <div style="margin-bottom: 2rem;">
                <button class="btn btn-primary" onclick="criarReceita()">➕ Criar Receita</button>
                <button class="btn btn-info" onclick="duplicarReceita()">📋 Duplicar Receita</button>
            </div>

            <div id="listaReceitas">
                <div style="text-align: center; color: #666; padding: 2rem;">
                    Nenhuma receita cadastrada. Crie receitas para começar.
                </div>
            </div>
        </div>

        <!-- Custos -->
        <div id="custos" class="tab-content">
            <h2 class="section-title">💰 Custos Operacionais Avançados</h2>
            <p>Configure todos os custos operacionais com simulação de cenários e metas de lucro.</p>

            <h3>Custos Fixos Mensais</h3>
            <div class="form-grid">
                <div class="form-group">
                    <label>Salários e Encargos (R$)</label>
                    <input type="number" id="custoSalarios" step="0.01" placeholder="0,00">
                </div>
                <div class="form-group">
                    <label>Aluguel (R$)</label>
                    <input type="number" id="custoAluguel" step="0.01" placeholder="0,00">
                </div>
                <div class="form-group">
                    <label>Energia Elétrica (R$)</label>
                    <input type="number" id="custoEnergia" step="0.01" placeholder="0,00">
                </div>
                <div class="form-group">
                    <label>Gás (R$)</label>
                    <input type="number" id="custoGas" step="0.01" placeholder="0,00">
                </div>
                <div class="form-group">
                    <label>Telefone/Internet (R$)</label>
                    <input type="number" id="custoTelefone" step="0.01" placeholder="0,00">
                </div>
                <div class="form-group">
                    <label>Marketing (R$)</label>
                    <input type="number" id="custoMarketing" step="0.01" placeholder="0,00">
                </div>
            </div>

            <h3>Parâmetros de Negócio</h3>
            <div class="form-grid">
                <div class="form-group">
                    <label>Pizzas Vendidas/Mês</label>
                    <input type="number" id="pizzasVendidasMes" placeholder="Ex: 1000">
                </div>
                <div class="form-group">
                    <label>Impostos (%)</label>
                    <input type="number" id="impostos" step="0.1" placeholder="Ex: 15,5">
                </div>
                <div class="form-group">
                    <label>Meta de Lucro Mensal (R$)</label>
                    <input type="number" id="metaLucro" step="0.01" placeholder="Ex: 15000">
                </div>
                <div class="form-group">
                    <label>Ticket Médio Desejado (R$)</label>
                    <input type="number" id="ticketMedio" step="0.01" placeholder="Ex: 35,00">
                </div>
            </div>

            <div style="margin-bottom: 2rem;">
                <button class="btn btn-primary" onclick="salvarCustos()">💾 Salvar Custos</button>
                <button class="btn btn-success" onclick="calcularCustos()">🧮 Calcular Custos</button>
            </div>

            <div class="simulator-section">
                <h3>🧮 Simulador de Cenários</h3>
                <div class="simulator-grid">
                    <div class="simulator-result">
                        <div class="result-value" id="custoOperacionalTotal">R$ 0,00</div>
                        <div class="result-label">Custo Operacional Total</div>
                    </div>
                    <div class="simulator-result">
                        <div class="result-value" id="custoPorPizza">R$ 0,00</div>
                        <div class="result-label">Custo por Pizza</div>
                    </div>
                    <div class="simulator-result">
                        <div class="result-value" id="margemNecessaria">0%</div>
                        <div class="result-label">Margem Necessária</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Precificação -->
        <div id="precificacao" class="tab-content">
            <h2 class="section-title">💲 Precificação Multi-Canal Avançada</h2>
            <p>Compare preços otimizados para cada canal com análise detalhada de rentabilidade.</p>

            <div class="form-grid">
                <div class="form-group">
                    <label>Receita para Precificar</label>
                    <select id="receitaPrecificar">
                        <option value="">Selecione uma receita</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Margem Desejada (%)</label>
                    <input type="number" id="margemDesejada" step="1" placeholder="Ex: 150">
                </div>
                <div class="form-group">
                    <label>Taxa de Entrega (R$)</label>
                    <input type="number" id="taxaEntrega" step="0.01" placeholder="Ex: 5,00">
                </div>
                <div class="form-group">
                    <label>Custo de Embalagem (R$)</label>
                    <input type="number" id="custoEmbalagem" step="0.01" placeholder="Ex: 2,50">
                </div>
            </div>

            <div style="margin-bottom: 2rem;">
                <button class="btn btn-primary" onclick="calcularPrecos()">💰 Calcular Preços</button>
                <button class="btn btn-info" onclick="exportarTabela()">📊 Exportar Tabela</button>
            </div>

            <div class="pricing-grid" id="precificacaoResultados">
                <!-- Balcão -->
                <div class="pricing-card">
                    <h3>🏪 Balcão</h3>
                    <div class="form-group">
                        <label>Taxa (%)</label>
                        <input type="number" value="0" readonly>
                    </div>
                    <div class="form-group">
                        <label>Margem (%)</label>
                        <input type="number" value="150" placeholder="150">
                    </div>
                    <div class="price-display">R$ 0,00</div>
                    <div class="margin-info">Margem Real: 0%</div>
                </div>

                <!-- Delivery Direto -->
                <div class="pricing-card">
                    <h3>🚚 Delivery Direto</h3>
                    <div class="form-group">
                        <label>Taxa (%)</label>
                        <input type="number" value="0" readonly>
                    </div>
                    <div class="form-group">
                        <label>Margem (%)</label>
                        <input type="number" value="150" placeholder="150">
                    </div>
                    <div class="price-display">R$ 0,00</div>
                    <div class="margin-info">Margem Real: 0%</div>
                </div>

                <!-- iFood -->
                <div class="pricing-card">
                    <h3>🍕 iFood</h3>
                    <div class="form-group">
                        <label>Taxa (%)</label>
                        <input type="number" value="27">
                    </div>
                    <div class="form-group">
                        <label>Margem (%)</label>
                        <input type="number" value="150" placeholder="150">
                    </div>
                    <div class="price-display">R$ 0,00</div>
                    <div class="margin-info">Margem Real: 0%</div>
                </div>

                <!-- 99Food -->
                <div class="pricing-card">
                    <h3>🥘 99Food</h3>
                    <div class="form-group">
                        <label>Taxa (%)</label>
                        <input type="number" value="12">
                    </div>
                    <div class="form-group">
                        <label>Margem (%)</label>
                        <input type="number" value="150" placeholder="150">
                    </div>
                    <div class="price-display">R$ 0,00</div>
                    <div class="margin-info">Margem Real: 0%</div>
                </div>

                <!-- Rappi -->
                <div class="pricing-card">
                    <h3>🛵 Rappi</h3>
                    <div class="form-group">
                        <label>Taxa (%)</label>
                        <input type="number" value="14">
                    </div>
                    <div class="form-group">
                        <label>Margem (%)</label>
                        <input type="number" value="150" placeholder="150">
                    </div>
                    <div class="price-display">R$ 0,00</div>
                    <div class="margin-info">Margem Real: 0%</div>
                </div>

                <!-- Uber Eats -->
                <div class="pricing-card">
                    <h3>🚗 Uber Eats</h3>
                    <div class="form-group">
                        <label>Taxa (%)</label>
                        <input type="number" value="15">
                    </div>
                    <div class="form-group">
                        <label>Margem (%)</label>
                        <input type="number" value="150" placeholder="150">
                    </div>
                    <div class="price-display">R$ 0,00</div>
                    <div class="margin-info">Margem Real: 0%</div>
                </div>
            </div>

            <table class="table" id="tabelaComparacao" style="margin-top: 2rem;">
                <thead>
                    <tr>
                        <th>Canal</th>
                        <th>Custo Total</th>
                        <th>Taxa (%)</th>
                        <th>Margem (%)</th>
                        <th>Preço Final</th>
                        <th>Lucro Líquido</th>
                        <th>Margem Real (%)</th>
                        <th>Ranking</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="8" style="text-align: center; color: #666;">
                            Selecione uma receita e calcule os preços para visualizar a comparação.
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Simulador -->
        <div id="simulador" class="tab-content">
            <div class="simulator-section">
                <h2 class="section-title">🧮 Simulador Avançado de Cenários</h2>
                <p>Simule diferentes cenários de vendas e custos para otimizar sua estratégia de precificação.</p>

                <div class="form-grid">
                    <div class="form-group">
                        <label>Vendas Mensais (pizzas)</label>
                        <input type="number" id="vendasMensais" value="1000" placeholder="1000">
                    </div>
                    <div class="form-group">
                        <label>Ticket Médio (R$)</label>
                        <input type="number" id="ticketMedioSim" value="35.00" step="0.01" placeholder="35,00">
                    </div>
                    <div class="form-group">
                        <label>Custo Médio/Pizza (R$)</label>
                        <input type="number" id="custoMedioPizza" value="15.00" step="0.01" placeholder="15,00">
                    </div>
                    <div class="form-group">
                        <label>Custos Fixos (R$)</label>
                        <input type="number" id="custosFixosSim" value="10000" step="0.01" placeholder="10000">
                    </div>
                </div>

                <div style="margin-bottom: 2rem;">
                    <button class="btn btn-primary" onclick="simularCenario()">🎯 Simular Cenário</button>
                </div>

                <div class="simulator-grid">
                    <div class="simulator-result">
                        <div class="result-value" id="receitaMensal">R$ 0,00</div>
                        <div class="result-label">Receita Mensal</div>
                    </div>
                    <div class="simulator-result">
                        <div class="result-value" id="lucroLiquido">R$ 0,00</div>
                        <div class="result-label">Lucro Líquido</div>
                    </div>
                    <div class="simulator-result">
                        <div class="result-value" id="margemLucro">0%</div>
                        <div class="result-label">Margem de Lucro</div>
                    </div>
                    <div class="simulator-result">
                        <div class="result-value" id="pontoEquilibrio">0</div>
                        <div class="result-label">Ponto de Equilíbrio</div>
                    </div>
                </div>
            </div>

            <h3>📊 Análise de Sensibilidade</h3>
            <p>Veja como mudanças nos parâmetros afetam sua rentabilidade.</p>

            <table class="table">
                <thead>
                    <tr>
                        <th>Cenário</th>
                        <th>Vendas/Mês</th>
                        <th>Ticket Médio</th>
                        <th>Receita</th>
                        <th>Lucro</th>
                        <th>Margem</th>
                        <th>Viabilidade</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Conservador</td>
                        <td>800</td>
                        <td>R$ 30,00</td>
                        <td>R$ 24.000</td>
                        <td>R$ 8.000</td>
                        <td>33%</td>
                        <td><span class="badge badge-success">Viável</span></td>
                    </tr>
                    <tr>
                        <td>Realista</td>
                        <td>1000</td>
                        <td>R$ 35,00</td>
                        <td>R$ 35.000</td>
                        <td>R$ 15.000</td>
                        <td>43%</td>
                        <td><span class="badge badge-success">Viável</span></td>
                    </tr>
                    <tr>
                        <td>Otimista</td>
                        <td>1200</td>
                        <td>R$ 40,00</td>
                        <td>R$ 48.000</td>
                        <td>R$ 23.000</td>
                        <td>48%</td>
                        <td><span class="badge badge-success">Viável</span></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Análises -->
        <div id="analises" class="tab-content">
            <h2 class="section-title">📈 Análises Avançadas</h2>
            <p>Relatórios detalhados e insights para otimização do negócio.</p>

            <div class="analysis-grid">
                <div class="analysis-card orange">
                    <h3>📊 Análise de Rentabilidade</h3>
                    <p>Compare a rentabilidade entre diferentes receitas e canais de venda.</p>
                    <button class="btn btn-primary" onclick="gerarRelatorioRentabilidade()">Gerar Relatório</button>
                </div>

                <div class="analysis-card blue">
                    <h3>📈 Histórico de Preços</h3>
                    <p>Acompanhe a evolução dos preços dos ingredientes ao longo do tempo.</p>
                    <button class="btn btn-primary" onclick="verHistoricoPrecos()">Ver Histórico</button>
                </div>

                <div class="analysis-card green">
                    <h3>🎯 Análise de Margem</h3>
                    <p>Identifique oportunidades de otimização de margem por canal.</p>
                    <button class="btn btn-primary" onclick="analisarMargem()">Analisar</button>
                </div>

                <div class="analysis-card purple">
                    <h3>📋 Relatório Completo</h3>
                    <p>Relatório executivo com todos os indicadores e recomendações.</p>
                    <button class="btn btn-primary" onclick="exportarPDF()">Exportar PDF</button>
                </div>
            </div>

            <table class="table" style="margin-top: 2rem;">
                <thead>
                    <tr>
                        <th>Período</th>
                        <th>Receitas</th>
                        <th>Custo Médio</th>
                        <th>Margem Média</th>
                        <th>Canal + Rentável</th>
                        <th>Variação Preços</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Setembro 2024</td>
                        <td>15</td>
                        <td>R$ 12,50</td>
                        <td>145%</td>
                        <td>Delivery Direto</td>
                        <td>+2,5%</td>
                        <td><span class="badge badge-success">Ótimo</span></td>
                    </tr>
                    <tr>
                        <td>Agosto 2024</td>
                        <td>12</td>
                        <td>R$ 11,80</td>
                        <td>150%</td>
                        <td>99Food</td>
                        <td>-1,2%</td>
                        <td><span class="badge badge-success">Bom</span></td>
                    </tr>
                    <tr>
                        <td>Julho 2024</td>
                        <td>8</td>
                        <td>R$ 13,20</td>
                        <td>135%</td>
                        <td>Balcão</td>
                        <td>+5,8%</td>
                        <td><span class="badge badge-warning">Regular</span></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Import/Export -->
        <div id="importexport" class="tab-content">
            <h2 class="section-title">📤 Import/Export de Dados</h2>
            <p>Sistema completo de backup e restauração para continuidade do trabalho em qualquer pizzaria.</p>

            <div class="import-export-section">
                <div class="import-export-grid">
                    <!-- Exportação -->
                    <div class="card">
                        <h3>📤 Exportar Dados</h3>
                        <p>Faça backup completo de todos os dados do sistema para continuar o trabalho posteriormente.</p>
                        
                        <div style="margin: 1rem 0;">
                            <h4>Dados a Exportar:</h4>
                            <div style="margin: 0.5rem 0;">
                                <label><input type="checkbox" id="exportIngredientes" checked> Ingredientes e Histórico</label>
                            </div>
                            <div style="margin: 0.5rem 0;">
                                <label><input type="checkbox" id="exportReceitas" checked> Receitas</label>
                            </div>
                            <div style="margin: 0.5rem 0;">
                                <label><input type="checkbox" id="exportCustos" checked> Custos Operacionais</label>
                            </div>
                            <div style="margin: 0.5rem 0;">
                                <label><input type="checkbox" id="exportConfiguracoes" checked> Configurações</label>
                            </div>
                        </div>

                        <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                            <button class="btn btn-success" onclick="exportarExcel()">📊 Excel (.xlsx)</button>
                            <button class="btn btn-info" onclick="exportarCSV()">📄 CSV</button>
                            <button class="btn btn-secondary" onclick="exportarJSON()">🔧 JSON</button>
                        </div>

                        <div id="statusExport" style="margin-top: 1rem;"></div>
                    </div>

                    <!-- Importação -->
                    <div class="card">
                        <h3>📥 Importar Dados</h3>
                        <p>Restaure dados de backup anterior ou importe dados de outra pizzaria.</p>

                        <div style="margin: 1rem 0;">
                            <label class="file-label" for="arquivoImport">
                                📁 Selecionar Arquivo
                            </label>
                            <input type="file" id="arquivoImport" class="file-input" accept=".xlsx,.csv,.json" onchange="processarArquivo(this)">
                        </div>

                        <div id="previewImport" style="display: none; margin: 1rem 0;">
                            <h4>Preview dos Dados:</h4>
                            <div id="dadosPreview"></div>
                        </div>

                        <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                            <button class="btn btn-primary" id="btnImportar" onclick="importarDados()" disabled>📥 Importar Dados</button>
                            <button class="btn btn-warning" onclick="backupAntes()">💾 Backup Antes</button>
                        </div>

                        <div id="statusImport" style="margin-top: 1rem;"></div>
                    </div>
                </div>

                <!-- Histórico de Backups -->
                <div class="card" style="margin-top: 2rem;">
                    <h3>📋 Histórico de Backups</h3>
                    <p>Gerencie seus backups automáticos e manuais.</p>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Data/Hora</th>
                                <th>Tipo</th>
                                <th>Tamanho</th>
                                <th>Ingredientes</th>
                                <th>Receitas</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody id="historicoBackups">
                            <tr>
                                <td colspan="6" style="text-align: center; color: #666;">
                                    Nenhum backup encontrado. Faça seu primeiro backup.
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <div style="margin-top: 1rem;">
                        <button class="btn btn-info" onclick="backupAutomatico()">🔄 Backup Automático</button>
                        <button class="btn btn-danger" onclick="limparBackups()">🗑️ Limpar Histórico</button>
                    </div>
                </div>

                <!-- Instruções -->
                <div class="alert alert-info" style="margin-top: 2rem;">
                    <strong>💡 Dicas de Uso:</strong><br>
                    • <strong>Excel</strong>: Melhor para análise e edição externa<br>
                    • <strong>CSV</strong>: Compatível com qualquer planilha<br>
                    • <strong>JSON</strong>: Backup completo com todas as configurações<br>
                    • Faça backups regulares para não perder seu trabalho<br>
                    • Use a importação para migrar entre dispositivos
                </div>
            </div>
        </div>
    </div>

    <footer class="footer">
        <p>© 2024 Pizzaria Pro - Sistema Completo de Precificação v2.0</p>
        <p>Desenvolvido para pizzarias que buscam gestão profissional e precificação inteligente</p>
    </footer>

    <script>
        // Dados globais
        let ingredientes = JSON.parse(localStorage.getItem('ingredientes')) || [];
        let receitas = JSON.parse(localStorage.getItem('receitas')) || [];
        let custosOperacionais = JSON.parse(localStorage.getItem('custosOperacionais')) || {};
        let configuracoes = JSON.parse(localStorage.getItem('configuracoes')) || {};
        let historicoBackups = JSON.parse(localStorage.getItem('historicoBackups')) || [];

        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            atualizarEstatisticas();
            carregarDados();
            verificarAlertas();
        });

        // Navegação entre abas
        function showTab(tabName) {
            // Esconder todas as abas
            const tabs = document.querySelectorAll('.tab-content');
            tabs.forEach(tab => tab.classList.remove('active'));

            // Remover classe active de todos os botões
            const buttons = document.querySelectorAll('.tab');
            buttons.forEach(btn => btn.classList.remove('active'));

            // Mostrar aba selecionada
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        // Gestão de Ingredientes
        function adicionarIngrediente() {
            const nome = document.getElementById('nomeIngrediente').value;
            const unidade = document.getElementById('unidadeIngrediente').value;
            const preco = parseFloat(document.getElementById('precoIngrediente').value);
            const quantidade = parseFloat(document.getElementById('quantidadeIngrediente').value);
            const fornecedor = document.getElementById('fornecedorIngrediente').value;
            const categoria = document.getElementById('categoriaIngrediente').value;

            if (!nome || !preco || !quantidade) {
                alert('Preencha todos os campos obrigatórios!');
                return;
            }

            const ingrediente = {
                id: Date.now(),
                nome,
                unidade,
                preco,
                quantidade,
                fornecedor,
                categoria,
                historico: [{
                    data: new Date().toISOString().split('T')[0],
                    preco: preco
                }],
                dataCriacao: new Date().toISOString()
            };

            ingredientes.push(ingrediente);
            salvarDados();
            atualizarTabelaIngredientes();
            limparFormularioIngrediente();
            atualizarEstatisticas();

            // Feedback visual
            const btn = event.target;
            const textoOriginal = btn.textContent;
            btn.textContent = 'Adicionado!';
            btn.style.background = '#28a745';
            setTimeout(() => {
                btn.textContent = textoOriginal;
                btn.style.background = '';
            }, 2000);
        }

        function limparFormularioIngrediente() {
            document.getElementById('nomeIngrediente').value = '';
            document.getElementById('precoIngrediente').value = '';
            document.getElementById('quantidadeIngrediente').value = '';
            document.getElementById('fornecedorIngrediente').value = '';
        }

        function atualizarTabelaIngredientes() {
            const tbody = document.querySelector('#tabelaIngredientes tbody');
            
            if (ingredientes.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9" style="text-align: center; color: #666;">
                            Nenhum ingrediente cadastrado. Adicione ingredientes para começar.
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = ingredientes.map(ing => {
                const custoTotal = (ing.preco * ing.quantidade).toFixed(2);
                const historicoCount = ing.historico ? ing.historico.length : 1;
                
                return `
                    <tr>
                        <td>${ing.nome}</td>
                        <td>${ing.unidade}</td>
                        <td>R$ ${ing.preco.toFixed(2)}</td>
                        <td><span class="badge badge-info">${historicoCount} registros</span></td>
                        <td>${ing.quantidade}</td>
                        <td>R$ ${custoTotal}</td>
                        <td>${ing.fornecedor || '-'}</td>
                        <td><span class="badge badge-success">${ing.categoria}</span></td>
                        <td>
                            <button class="btn btn-warning" onclick="editarIngrediente(${ing.id})" style="padding: 0.25rem 0.5rem; font-size: 0.8rem;">✏️</button>
                            <button class="btn btn-danger" onclick="excluirIngrediente(${ing.id})" style="padding: 0.25rem 0.5rem; font-size: 0.8rem;">🗑️</button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function editarIngrediente(id) {
            const ingrediente = ingredientes.find(ing => ing.id === id);
            if (!ingrediente) return;

            document.getElementById('nomeIngrediente').value = ingrediente.nome;
            document.getElementById('unidadeIngrediente').value = ingrediente.unidade;
            document.getElementById('precoIngrediente').value = ingrediente.preco;
            document.getElementById('quantidadeIngrediente').value = ingrediente.quantidade;
            document.getElementById('fornecedorIngrediente').value = ingrediente.fornecedor || '';
            document.getElementById('categoriaIngrediente').value = ingrediente.categoria;

            // Remover ingrediente para re-adicionar editado
            excluirIngrediente(id);
        }

        function excluirIngrediente(id) {
            if (confirm('Tem certeza que deseja excluir este ingrediente?')) {
                ingredientes = ingredientes.filter(ing => ing.id !== id);
                salvarDados();
                atualizarTabelaIngredientes();
                atualizarEstatisticas();
            }
        }

        function atualizarPrecos() {
            const novoPreco = prompt('Digite o novo preço para atualização em massa:');
            if (!novoPreco || isNaN(novoPreco)) return;

            const preco = parseFloat(novoPreco);
            ingredientes.forEach(ing => {
                if (!ing.historico) ing.historico = [];
                ing.historico.push({
                    data: new Date().toISOString().split('T')[0],
                    preco: preco
                });
                ing.preco = preco;
            });

            salvarDados();
            atualizarTabelaIngredientes();
            alert('Preços atualizados com sucesso!');
        }

        // Gestão de Receitas
        function criarReceita() {
            const nome = document.getElementById('nomeReceita').value;
            const tamanho = document.getElementById('tamanhoReceita').value;
            const categoria = document.getElementById('categoriaReceita').value;

            if (!nome) {
                alert('Digite o nome da receita!');
                return;
            }

            const receita = {
                id: Date.now(),
                nome,
                tamanho,
                categoria,
                ingredientes: [],
                custoTotal: 0,
                dataCriacao: new Date().toISOString()
            };

            receitas.push(receita);
            salvarDados();
            atualizarListaReceitas();
            limparFormularioReceita();
            atualizarEstatisticas();
        }

        function limparFormularioReceita() {
            document.getElementById('nomeReceita').value = '';
        }

        function atualizarListaReceitas() {
            const container = document.getElementById('listaReceitas');
            
            if (receitas.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: #666; padding: 2rem;">
                        Nenhuma receita cadastrada. Crie receitas para começar.
                    </div>
                `;
                return;
            }

            container.innerHTML = receitas.map(receita => `
                <div class="card" style="margin-bottom: 1rem;">
                    <h4>${receita.nome} (${receita.tamanho})</h4>
                    <p><strong>Categoria:</strong> ${receita.categoria}</p>
                    <p><strong>Custo Total:</strong> R$ ${receita.custoTotal.toFixed(2)}</p>
                    <p><strong>Ingredientes:</strong> ${receita.ingredientes.length}</p>
                    <div>
                        <button class="btn btn-primary" onclick="editarReceita(${receita.id})">✏️ Editar</button>
                        <button class="btn btn-danger" onclick="excluirReceita(${receita.id})">🗑️ Excluir</button>
                    </div>
                </div>
            `).join('');

            // Atualizar select de receitas na precificação
            atualizarSelectReceitas();
        }

        function atualizarSelectReceitas() {
            const select = document.getElementById('receitaPrecificar');
            select.innerHTML = '<option value="">Selecione uma receita</option>' +
                receitas.map(receita => 
                    `<option value="${receita.id}">${receita.nome} (${receita.tamanho})</option>`
                ).join('');
        }

        function excluirReceita(id) {
            if (confirm('Tem certeza que deseja excluir esta receita?')) {
                receitas = receitas.filter(rec => rec.id !== id);
                salvarDados();
                atualizarListaReceitas();
                atualizarEstatisticas();
            }
        }

        // Custos Operacionais
        function salvarCustos() {
            custosOperacionais = {
                salarios: parseFloat(document.getElementById('custoSalarios').value) || 0,
                aluguel: parseFloat(document.getElementById('custoAluguel').value) || 0,
                energia: parseFloat(document.getElementById('custoEnergia').value) || 0,
                gas: parseFloat(document.getElementById('custoGas').value) || 0,
                telefone: parseFloat(document.getElementById('custoTelefone').value) || 0,
                marketing: parseFloat(document.getElementById('custoMarketing').value) || 0,
                pizzasVendidasMes: parseInt(document.getElementById('pizzasVendidasMes').value) || 1000,
                impostos: parseFloat(document.getElementById('impostos').value) || 15.5,
                metaLucro: parseFloat(document.getElementById('metaLucro').value) || 15000,
                ticketMedio: parseFloat(document.getElementById('ticketMedio').value) || 35
            };

            salvarDados();
            calcularCustos();
            alert('Custos salvos com sucesso!');
        }

        function calcularCustos() {
            if (!custosOperacionais.pizzasVendidasMes) {
                alert('Configure os parâmetros de negócio primeiro!');
                return;
            }

            const custoTotal = custosOperacionais.salarios + custosOperacionais.aluguel + 
                              custosOperacionais.energia + custosOperacionais.gas + 
                              custosOperacionais.telefone + custosOperacionais.marketing;

            const custoPorPizza = custoTotal / custosOperacionais.pizzasVendidasMes;
            const margemNecessaria = ((custosOperacionais.metaLucro / custosOperacionais.pizzasVendidasMes) / custosOperacionais.ticketMedio) * 100;

            document.getElementById('custoOperacionalTotal').textContent = `R$ ${custoTotal.toFixed(2)}`;
            document.getElementById('custoPorPizza').textContent = `R$ ${custoPorPizza.toFixed(2)}`;
            document.getElementById('margemNecessaria').textContent = `${margemNecessaria.toFixed(1)}%`;
        }

        // Precificação
        function calcularPrecos() {
            const receitaId = document.getElementById('receitaPrecificar').value;
            const margem = parseFloat(document.getElementById('margemDesejada').value) || 150;
            const taxaEntrega = parseFloat(document.getElementById('taxaEntrega').value) || 5;
            const custoEmbalagem = parseFloat(document.getElementById('custoEmbalagem').value) || 2.5;

            if (!receitaId) {
                alert('Selecione uma receita!');
                return;
            }

            const receita = receitas.find(r => r.id == receitaId);
            if (!receita) return;

            // Calcular custo base da receita
            let custoBase = 0;
            receita.ingredientes.forEach(ing => {
                const ingrediente = ingredientes.find(i => i.id === ing.ingredienteId);
                if (ingrediente) {
                    custoBase += ingrediente.preco * ing.quantidade;
                }
            });

            // Adicionar custo operacional por pizza
            const custoPorPizza = custosOperacionais.pizzasVendidasMes ? 
                (custosOperacionais.salarios + custosOperacionais.aluguel + 
                 custosOperacionais.energia + custosOperacionais.gas + 
                 custosOperacionais.telefone + custosOperacionais.marketing) / 
                 custosOperacionais.pizzasVendidasMes : 0;

            custoBase += custoPorPizza;

            // Calcular preços por canal
            const canais = [
                { nome: 'Balcão', taxa: 0, delivery: false },
                { nome: 'Delivery Direto', taxa: 0, delivery: true },
                { nome: 'iFood', taxa: 27, delivery: true },
                { nome: '99Food', taxa: 12, delivery: true },
                { nome: 'Rappi', taxa: 14, delivery: true },
                { nome: 'Uber Eats', taxa: 15, delivery: true }
            ];

            const resultados = canais.map(canal => {
                let custoTotal = custoBase + custoEmbalagem;
                if (canal.delivery) custoTotal += taxaEntrega;

                const precoFinal = custoTotal * (1 + margem/100) / (1 - canal.taxa/100);
                const lucroLiquido = precoFinal - custoTotal;
                const margemReal = (lucroLiquido / precoFinal) * 100;

                return {
                    canal: canal.nome,
                    custoTotal,
                    taxa: canal.taxa,
                    margem,
                    precoFinal,
                    lucroLiquido,
                    margemReal
                };
            });

            // Atualizar cards de precificação
            const cards = document.querySelectorAll('.pricing-card');
            cards.forEach((card, index) => {
                if (resultados[index]) {
                    const resultado = resultados[index];
                    card.querySelector('.price-display').textContent = `R$ ${resultado.precoFinal.toFixed(2)}`;
                    card.querySelector('.margin-info').textContent = `Margem Real: ${resultado.margemReal.toFixed(1)}%`;
                }
            });

            // Atualizar tabela de comparação
            atualizarTabelaComparacao(resultados);
        }

        function atualizarTabelaComparacao(resultados) {
            const tbody = document.querySelector('#tabelaComparacao tbody');
            
            // Ordenar por margem real (melhor primeiro)
            resultados.sort((a, b) => b.margemReal - a.margemReal);

            tbody.innerHTML = resultados.map((resultado, index) => {
                const ranking = index + 1;
                const badgeClass = ranking === 1 ? 'badge-success' : ranking === 2 ? 'badge-info' : 'badge-warning';
                
                return `
                    <tr>
                        <td>${resultado.canal}</td>
                        <td>R$ ${resultado.custoTotal.toFixed(2)}</td>
                        <td>${resultado.taxa}%</td>
                        <td>${resultado.margem}%</td>
                        <td>R$ ${resultado.precoFinal.toFixed(2)}</td>
                        <td>R$ ${resultado.lucroLiquido.toFixed(2)}</td>
                        <td>${resultado.margemReal.toFixed(1)}%</td>
                        <td><span class="badge ${badgeClass}">${ranking}º</span></td>
                    </tr>
                `;
            }).join('');
        }

        // Simulador
        function simularCenario() {
            const vendas = parseInt(document.getElementById('vendasMensais').value) || 1000;
            const ticket = parseFloat(document.getElementById('ticketMedioSim').value) || 35;
            const custo = parseFloat(document.getElementById('custoMedioPizza').value) || 15;
            const fixos = parseFloat(document.getElementById('custosFixosSim').value) || 10000;

            const receita = vendas * ticket;
            const custoTotal = (vendas * custo) + fixos;
            const lucro = receita - custoTotal;
            const margem = (lucro / receita) * 100;
            const pontoEquilibrio = Math.ceil(fixos / (ticket - custo));

            document.getElementById('receitaMensal').textContent = `R$ ${receita.toLocaleString('pt-BR')}`;
            document.getElementById('lucroLiquido').textContent = `R$ ${lucro.toLocaleString('pt-BR')}`;
            document.getElementById('margemLucro').textContent = `${margem.toFixed(1)}%`;
            document.getElementById('pontoEquilibrio').textContent = pontoEquilibrio;
        }

        // Import/Export
        function exportarExcel() {
            const dados = prepararDadosExport();
            
            const wb = XLSX.utils.book_new();
            
            // Aba Ingredientes
            if (document.getElementById('exportIngredientes').checked) {
                const wsIngredientes = XLSX.utils.json_to_sheet(dados.ingredientes);
                XLSX.utils.book_append_sheet(wb, wsIngredientes, "Ingredientes");
            }
            
            // Aba Receitas
            if (document.getElementById('exportReceitas').checked) {
                const wsReceitas = XLSX.utils.json_to_sheet(dados.receitas);
                XLSX.utils.book_append_sheet(wb, wsReceitas, "Receitas");
            }
            
            // Aba Custos
            if (document.getElementById('exportCustos').checked) {
                const wsCustos = XLSX.utils.json_to_sheet([dados.custosOperacionais]);
                XLSX.utils.book_append_sheet(wb, wsCustos, "Custos");
            }
            
            const nomeArquivo = `pizzaria_pro_backup_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(wb, nomeArquivo);
            
            registrarBackup('Excel', nomeArquivo);
            mostrarStatus('statusExport', 'Dados exportados com sucesso!', 'success');
        }

        function exportarCSV() {
            const dados = prepararDadosExport();
            
            let csv = '';
            
            if (document.getElementById('exportIngredientes').checked) {
                csv += 'INGREDIENTES\n';
                csv += 'Nome,Unidade,Preço,Quantidade,Fornecedor,Categoria\n';
                dados.ingredientes.forEach(ing => {
                    csv += `${ing.nome},${ing.unidade},${ing.preco},${ing.quantidade},${ing.fornecedor || ''},${ing.categoria}\n`;
                });
                csv += '\n';
            }
            
            if (document.getElementById('exportReceitas').checked) {
                csv += 'RECEITAS\n';
                csv += 'Nome,Tamanho,Categoria,Custo Total\n';
                dados.receitas.forEach(rec => {
                    csv += `${rec.nome},${rec.tamanho},${rec.categoria},${rec.custoTotal}\n`;
                });
            }
            
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const nomeArquivo = `pizzaria_pro_backup_${new Date().toISOString().split('T')[0]}.csv`;
            
            link.href = URL.createObjectURL(blob);
            link.download = nomeArquivo;
            link.click();
            
            registrarBackup('CSV', nomeArquivo);
            mostrarStatus('statusExport', 'Dados exportados em CSV!', 'success');
        }

        function exportarJSON() {
            const dados = prepararDadosExport();
            
            const backup = {
                versao: '2.0',
                dataExport: new Date().toISOString(),
                dados: dados
            };
            
            const blob = new Blob([JSON.stringify(backup, null, 2)], { type: 'application/json' });
            const link = document.createElement('a');
            const nomeArquivo = `pizzaria_pro_backup_${new Date().toISOString().split('T')[0]}.json`;
            
            link.href = URL.createObjectURL(blob);
            link.download = nomeArquivo;
            link.click();
            
            registrarBackup('JSON', nomeArquivo);
            mostrarStatus('statusExport', 'Backup completo exportado!', 'success');
        }

        function prepararDadosExport() {
            const dados = {};
            
            if (document.getElementById('exportIngredientes').checked) {
                dados.ingredientes = ingredientes;
            }
            
            if (document.getElementById('exportReceitas').checked) {
                dados.receitas = receitas;
            }
            
            if (document.getElementById('exportCustos').checked) {
                dados.custosOperacionais = custosOperacionais;
            }
            
            if (document.getElementById('exportConfiguracoes').checked) {
                dados.configuracoes = configuracoes;
            }
            
            return dados;
        }

        function processarArquivo(input) {
            const arquivo = input.files[0];
            if (!arquivo) return;
            
            const reader = new FileReader();
            const extensao = arquivo.name.split('.').pop().toLowerCase();
            
            reader.onload = function(e) {
                try {
                    let dados;
                    
                    if (extensao === 'json') {
                        dados = JSON.parse(e.target.result);
                    } else if (extensao === 'xlsx') {
                        const workbook = XLSX.read(e.target.result, { type: 'binary' });
                        dados = processarExcel(workbook);
                    } else if (extensao === 'csv') {
                        dados = processarCSV(e.target.result);
                    }
                    
                    mostrarPreview(dados);
                    document.getElementById('btnImportar').disabled = false;
                    
                } catch (error) {
                    mostrarStatus('statusImport', 'Erro ao processar arquivo: ' + error.message, 'error');
                }
            };
            
            if (extensao === 'xlsx') {
                reader.readAsBinaryString(arquivo);
            } else {
                reader.readAsText(arquivo);
            }
        }

        function mostrarPreview(dados) {
            const preview = document.getElementById('previewImport');
            const container = document.getElementById('dadosPreview');
            
            let html = '';
            
            if (dados.ingredientes) {
                html += `<p><strong>Ingredientes:</strong> ${dados.ingredientes.length} itens</p>`;
            }
            
            if (dados.receitas) {
                html += `<p><strong>Receitas:</strong> ${dados.receitas.length} itens</p>`;
            }
            
            if (dados.custosOperacionais) {
                html += `<p><strong>Custos Operacionais:</strong> Configurado</p>`;
            }
            
            container.innerHTML = html;
            preview.style.display = 'block';
            
            // Armazenar dados para importação
            window.dadosParaImportar = dados;
        }

        function importarDados() {
            if (!window.dadosParaImportar) {
                alert('Nenhum dado para importar!');
                return;
            }
            
            if (!confirm('Isso substituirá todos os dados atuais. Deseja continuar?')) {
                return;
            }
            
            const dados = window.dadosParaImportar;
            
            if (dados.ingredientes) {
                ingredientes = dados.ingredientes;
            }
            
            if (dados.receitas) {
                receitas = dados.receitas;
            }
            
            if (dados.custosOperacionais) {
                custosOperacionais = dados.custosOperacionais;
            }
            
            if (dados.configuracoes) {
                configuracoes = dados.configuracoes;
            }
            
            salvarDados();
            carregarDados();
            atualizarEstatisticas();
            
            mostrarStatus('statusImport', 'Dados importados com sucesso!', 'success');
            
            // Limpar preview
            document.getElementById('previewImport').style.display = 'none';
            document.getElementById('btnImportar').disabled = true;
            document.getElementById('arquivoImport').value = '';
        }

        function registrarBackup(tipo, arquivo) {
            const backup = {
                data: new Date().toISOString(),
                tipo: tipo,
                arquivo: arquivo,
                ingredientes: ingredientes.length,
                receitas: receitas.length,
                tamanho: '~' + Math.round(JSON.stringify({ingredientes, receitas, custosOperacionais}).length / 1024) + 'KB'
            };
            
            historicoBackups.unshift(backup);
            if (historicoBackups.length > 10) {
                historicoBackups = historicoBackups.slice(0, 10);
            }
            
            localStorage.setItem('historicoBackups', JSON.stringify(historicoBackups));
            atualizarHistoricoBackups();
        }

        function atualizarHistoricoBackups() {
            const tbody = document.getElementById('historicoBackups');
            
            if (historicoBackups.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" style="text-align: center; color: #666;">
                            Nenhum backup encontrado. Faça seu primeiro backup.
                        </td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = historicoBackups.map(backup => `
                <tr>
                    <td>${new Date(backup.data).toLocaleString('pt-BR')}</td>
                    <td><span class="badge badge-info">${backup.tipo}</span></td>
                    <td>${backup.tamanho}</td>
                    <td>${backup.ingredientes}</td>
                    <td>${backup.receitas}</td>
                    <td>
                        <button class="btn btn-danger" onclick="removerBackup('${backup.data}')" style="padding: 0.25rem 0.5rem; font-size: 0.8rem;">🗑️</button>
                    </td>
                </tr>
            `).join('');
        }

        function mostrarStatus(elementId, mensagem, tipo) {
            const elemento = document.getElementById(elementId);
            const classe = tipo === 'success' ? 'alert-success' : tipo === 'error' ? 'alert-danger' : 'alert-info';
            
            elemento.innerHTML = `<div class="alert ${classe}">${mensagem}</div>`;
            
            setTimeout(() => {
                elemento.innerHTML = '';
            }, 5000);
        }

        // Funções auxiliares
        function salvarDados() {
            localStorage.setItem('ingredientes', JSON.stringify(ingredientes));
            localStorage.setItem('receitas', JSON.stringify(receitas));
            localStorage.setItem('custosOperacionais', JSON.stringify(custosOperacionais));
            localStorage.setItem('configuracoes', JSON.stringify(configuracoes));
        }

        function carregarDados() {
            atualizarTabelaIngredientes();
            atualizarListaReceitas();
            atualizarHistoricoBackups();
            
            // Carregar custos nos campos
            if (custosOperacionais.salarios) {
                document.getElementById('custoSalarios').value = custosOperacionais.salarios;
                document.getElementById('custoAluguel').value = custosOperacionais.aluguel;
                document.getElementById('custoEnergia').value = custosOperacionais.energia;
                document.getElementById('custoGas').value = custosOperacionais.gas;
                document.getElementById('custoTelefone').value = custosOperacionais.telefone;
                document.getElementById('custoMarketing').value = custosOperacionais.marketing;
                document.getElementById('pizzasVendidasMes').value = custosOperacionais.pizzasVendidasMes;
                document.getElementById('impostos').value = custosOperacionais.impostos;
                document.getElementById('metaLucro').value = custosOperacionais.metaLucro;
                document.getElementById('ticketMedio').value = custosOperacionais.ticketMedio;
            }
        }

        function atualizarEstatisticas() {
            document.getElementById('totalIngredientes').textContent = ingredientes.length;
            document.getElementById('totalReceitas').textContent = receitas.length;
            
            // Calcular custo médio
            const custoMedio = ingredientes.length > 0 ? 
                ingredientes.reduce((sum, ing) => sum + (ing.preco * ing.quantidade), 0) / ingredientes.length : 0;
            document.getElementById('custoMedio').textContent = `R$ ${custoMedio.toFixed(2)}`;
            
            verificarAlertas();
        }

        function verificarAlertas() {
            let alertas = 0;
            
            if (ingredientes.length === 0) alertas++;
            if (receitas.length === 0) alertas++;
            if (!custosOperacionais.salarios) alertas++;
            
            document.getElementById('totalAlertas').textContent = alertas;
            
            const alertaDiv = document.getElementById('alertaConfiguracao');
            if (alertas === 0) {
                alertaDiv.className = 'alert alert-success';
                alertaDiv.innerHTML = '<strong>✅ Sistema Configurado</strong><br>Todos os módulos estão configurados e prontos para uso.';
            }
        }

        // Funções de análise (placeholder)
        function gerarRelatorioRentabilidade() {
            alert('Relatório de rentabilidade em desenvolvimento!');
        }

        function verHistoricoPrecos() {
            alert('Histórico de preços em desenvolvimento!');
        }

        function analisarMargem() {
            alert('Análise de margem em desenvolvimento!');
        }

        function exportarPDF() {
            alert('Exportação PDF em desenvolvimento!');
        }

        function exportarTabela() {
            alert('Exportação de tabela em desenvolvimento!');
        }

        function duplicarReceita() {
            alert('Duplicação de receita em desenvolvimento!');
        }

        function backupAutomatico() {
            exportarJSON();
            alert('Backup automático realizado!');
        }

        function limparBackups() {
            if (confirm('Tem certeza que deseja limpar o histórico de backups?')) {
                historicoBackups = [];
                localStorage.removeItem('historicoBackups');
                atualizarHistoricoBackups();
            }
        }

        function backupAntes() {
            exportarJSON();
            alert('Backup de segurança criado antes da importação!');
        }
    </script>
</body>
</html>
