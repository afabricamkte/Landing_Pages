<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>NPS Eventos — Sistema de Pesquisas Profissional</title>
  <meta name="description" content="Crie pesquisas de satisfação profissionais e colete feedback valioso dos participantes dos seus eventos.">
  <meta name="color-scheme" content="light dark">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    :root{
      --bg-primary: #0a0b0f;
      --bg-secondary: #111218;
      --bg-card: #1a1d26;
      --bg-elevated: #242832;
      --text-primary: #ffffff;
      --text-secondary: #a1a8b8;
      --text-muted: #6b7280;
      --brand-primary: #6366f1;
      --brand-secondary: #8b5cf6;
      --brand-gradient: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
      --success: #10b981;
      --warning: #f59e0b;
      --error: #ef4444;
      --border: #2d3748;
      --border-light: #374151;
      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      --radius: 12px;
      --radius-lg: 16px;
      --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    html, body {
      height: 100%;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.6;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    /* Scrollbar */
    ::-webkit-scrollbar { width: 8px; }
    ::-webkit-scrollbar-track { background: var(--bg-secondary); }
    ::-webkit-scrollbar-thumb { background: var(--border); border-radius: 4px; }
    ::-webkit-scrollbar-thumb:hover { background: var(--border-light); }

    /* Typography */
    h1, h2, h3, h4, h5, h6 {
      font-weight: 600;
      line-height: 1.3;
      margin-bottom: 0.5rem;
    }
    h1 { font-size: 2.5rem; font-weight: 800; }
    h2 { font-size: 2rem; font-weight: 700; }
    h3 { font-size: 1.5rem; }
    h4 { font-size: 1.25rem; }

    /* Layout */
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    .grid {
      display: grid;
      gap: 1.5rem;
    }

    .grid-2 { grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); }
    .grid-3 { grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); }

    .flex {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .flex-col {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .flex-between {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .flex-center {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .flex-wrap { flex-wrap: wrap; }
    .gap-2 { gap: 0.5rem; }
    .gap-4 { gap: 1rem; }
    .gap-6 { gap: 1.5rem; }

    /* Cards */
    .card {
      background: var(--bg-card);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      padding: 1.5rem;
      box-shadow: var(--shadow);
      transition: var(--transition);
    }

    .card:hover {
      border-color: var(--border-light);
      box-shadow: var(--shadow-lg);
    }

    .card-elevated {
      background: var(--bg-elevated);
      box-shadow: var(--shadow-xl);
    }

    .card-gradient {
      background: var(--brand-gradient);
      border: none;
      color: white;
    }

    /* Buttons */
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      border: 1px solid var(--border);
      border-radius: var(--radius);
      background: var(--bg-card);
      color: var(--text-primary);
      font-weight: 500;
      text-decoration: none;
      cursor: pointer;
      transition: var(--transition);
      font-size: 0.875rem;
      white-space: nowrap;
    }

    .btn:hover {
      background: var(--bg-elevated);
      border-color: var(--border-light);
      transform: translateY(-1px);
    }

    .btn:active {
      transform: translateY(0);
    }

    .btn-primary {
      background: var(--brand-gradient);
      border: none;
      color: white;
      font-weight: 600;
    }

    .btn-primary:hover {
      background: linear-gradient(135deg, #5855eb 0%, #7c3aed 100%);
      box-shadow: var(--shadow-lg);
    }

    .btn-success {
      background: var(--success);
      border: none;
      color: white;
    }

    .btn-warning {
      background: var(--warning);
      border: none;
      color: white;
    }

    .btn-error {
      background: var(--error);
      border: none;
      color: white;
    }

    .btn-ghost {
      background: transparent;
      border: 1px solid transparent;
    }

    .btn-ghost:hover {
      background: var(--bg-card);
      border-color: var(--border);
    }

    .btn-sm {
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
    }

    .btn-lg {
      padding: 1rem 2rem;
      font-size: 1rem;
    }

    /* Forms */
    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .form-label {
      font-weight: 500;
      color: var(--text-secondary);
      font-size: 0.875rem;
    }

    .form-input, .form-select, .form-textarea {
      padding: 0.75rem 1rem;
      border: 1px solid var(--border);
      border-radius: var(--radius);
      background: var(--bg-secondary);
      color: var(--text-primary);
      font-size: 0.875rem;
      transition: var(--transition);
    }

    .form-input:focus, .form-select:focus, .form-textarea:focus {
      outline: none;
      border-color: var(--brand-primary);
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .form-textarea {
      min-height: 100px;
      resize: vertical;
    }

    /* Header */
    .header {
      position: sticky;
      top: 0;
      z-index: 50;
      background: rgba(10, 11, 15, 0.8);
      backdrop-filter: blur(20px);
      border-bottom: 1px solid var(--border);
    }

    .header-content {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 0;
    }

    .logo {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      font-weight: 700;
      font-size: 1.25rem;
      text-decoration: none;
      color: var(--text-primary);
    }

    .logo-icon {
      width: 32px;
      height: 32px;
      background: var(--brand-gradient);
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 800;
    }

    .nav {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .lang-switcher {
      display: flex;
      background: var(--bg-card);
      border: 1px solid var(--border);
      border-radius: var(--radius);
      overflow: hidden;
    }

    .lang-btn {
      padding: 0.5rem 0.75rem;
      border: none;
      background: transparent;
      color: var(--text-secondary);
      cursor: pointer;
      transition: var(--transition);
      font-size: 0.8rem;
      font-weight: 500;
    }

    .lang-btn:hover, .lang-btn.active {
      background: var(--brand-primary);
      color: white;
    }

    /* Hero Section */
    .hero {
      padding: 4rem 0;
      text-align: center;
      background: radial-gradient(ellipse at center, rgba(99, 102, 241, 0.1) 0%, transparent 70%);
    }

    .hero-title {
      background: linear-gradient(135deg, var(--text-primary) 0%, var(--brand-secondary) 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 1rem;
    }

    .hero-subtitle {
      font-size: 1.25rem;
      color: var(--text-secondary);
      margin-bottom: 2rem;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .hero-cta {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    /* Features */
    .features {
      padding: 4rem 0;
    }

    .feature-card {
      text-align: center;
      padding: 2rem;
    }

    .feature-icon {
      width: 64px;
      height: 64px;
      background: var(--brand-gradient);
      border-radius: var(--radius-lg);
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 1rem;
      font-size: 1.5rem;
      color: white;
    }

    /* Status badges */
    .status {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.25rem 0.75rem;
      border-radius: 999px;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .status-draft {
      background: rgba(107, 114, 128, 0.2);
      color: var(--text-secondary);
    }

    .status-active {
      background: rgba(16, 185, 129, 0.2);
      color: var(--success);
    }

    .status-closed {
      background: rgba(239, 68, 68, 0.2);
      color: var(--error);
    }

    /* Progress bar */
    .progress {
      width: 100%;
      height: 8px;
      background: var(--bg-secondary);
      border-radius: 999px;
      overflow: hidden;
      margin: 1rem 0;
    }

    .progress-bar {
      height: 100%;
      background: var(--brand-gradient);
      border-radius: 999px;
      transition: width 0.3s ease;
      position: relative;
    }

    .progress-bar::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      animation: shimmer 2s infinite;
    }

    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }

    /* Quiz styles */
    .quiz-container {
      max-width: 800px;
      margin: 0 auto;
      padding: 2rem 0;
    }

    .quiz-card {
      background: var(--bg-card);
      border: 1px solid var(--border);
      border-radius: var(--radius-lg);
      padding: 2rem;
      box-shadow: var(--shadow-xl);
    }

    .quiz-header {
      text-align: center;
      margin-bottom: 2rem;
    }

    .quiz-question {
      margin-bottom: 2rem;
    }

    .quiz-question h3 {
      margin-bottom: 1rem;
      color: var(--text-primary);
    }

    .quiz-help {
      color: var(--text-muted);
      font-size: 0.875rem;
      margin-bottom: 1.5rem;
    }

    .scale-container {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      justify-content: center;
      margin: 1.5rem 0;
    }

    .scale-btn {
      width: 48px;
      height: 48px;
      border: 2px solid var(--border);
      border-radius: var(--radius);
      background: var(--bg-secondary);
      color: var(--text-secondary);
      font-weight: 600;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .scale-btn:hover {
      border-color: var(--brand-primary);
      background: var(--bg-elevated);
    }

    .scale-btn.selected {
      border-color: var(--brand-primary);
      background: var(--brand-gradient);
      color: white;
      transform: scale(1.1);
    }

    .quiz-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 2rem;
      padding-top: 2rem;
      border-top: 1px solid var(--border);
    }

    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes slideIn {
      from { opacity: 0; transform: translateX(-20px); }
      to { opacity: 1; transform: translateX(0); }
    }

    .fade-in {
      animation: fadeIn 0.5s ease-out;
    }

    .slide-in {
      animation: slideIn 0.3s ease-out;
    }

    /* Table */
    .table-container {
      overflow-x: auto;
      border-radius: var(--radius);
      border: 1px solid var(--border);
    }

    .table {
      width: 100%;
      border-collapse: collapse;
      background: var(--bg-card);
    }

    .table th,
    .table td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid var(--border);
    }

    .table th {
      background: var(--bg-secondary);
      font-weight: 600;
      color: var(--text-secondary);
      font-size: 0.875rem;
    }

    .table tr:hover {
      background: var(--bg-secondary);
    }

    /* Responsive */
    @media (max-width: 768px) {
      .container { padding: 0 1rem; }
      .hero { padding: 2rem 0; }
      .hero-title { font-size: 2rem; }
      .hero-subtitle { font-size: 1rem; }
      .hero-cta { flex-direction: column; align-items: center; }
      .features { padding: 2rem 0; }
      .quiz-card { padding: 1.5rem; }
      .scale-container { gap: 0.25rem; }
      .scale-btn { width: 40px; height: 40px; }
      .flex-between { flex-direction: column; gap: 1rem; align-items: stretch; }
    }

    /* Loading states */
    .loading {
      opacity: 0.6;
      pointer-events: none;
    }

    .spinner {
      width: 20px;
      height: 20px;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Utilities */
    .text-center { text-align: center; }
    .text-muted { color: var(--text-muted); }
    .text-secondary { color: var(--text-secondary); }
    .font-semibold { font-weight: 600; }
    .font-bold { font-weight: 700; }
    .mb-4 { margin-bottom: 1rem; }
    .mb-6 { margin-bottom: 1.5rem; }
    .mt-4 { margin-top: 1rem; }
    .mt-6 { margin-top: 1.5rem; }
    .hidden { display: none; }
    .sr-only { position: absolute; left: -10000px; width: 1px; height: 1px; overflow: hidden; }
  </style>
</head>
<body>
  <header class="header">
    <div class="container">
      <div class="header-content">
        <a href="#/" class="logo">
          <div class="logo-icon">N</div>
          <span id="brandTitle">NPS Eventos</span>
        </a>
        <nav class="nav">
          <div class="lang-switcher">
            <button class="lang-btn active" id="lang-pt">PT</button>
            <button class="lang-btn" id="lang-en">EN</button>
            <button class="lang-btn" id="lang-es">ES</button>
          </div>
          <a href="#/admin" class="btn btn-ghost" id="nav-admin">Admin</a>
        </nav>
      </div>
    </div>
  </header>

  <main id="app"></main>

  <script>
  // ===== Utils =====
  const qs = (s, el=document)=>el.querySelector(s);
  const qsa = (s, el=document)=>[...el.querySelectorAll(s)];
  const uid = (p="") => p + Math.random().toString(36).slice(2,10) + Date.now().toString(36).slice(-4);
  const todayISO = ()=> new Date().toISOString().slice(0,10);
  const clamp = (v,min,max)=>Math.max(min,Math.min(max,v));
  const LS_KEY='nps_quiz_state_v3';

  let state = null;
  const saveState = ()=>{
    try {
      localStorage.setItem(LS_KEY, JSON.stringify(state));
    } catch(e) {
      console.warn('Could not save to localStorage:', e);
    }
  };
  const loadState = ()=>{ 
    try{ 
      const stored = localStorage.getItem(LS_KEY);
      return stored ? JSON.parse(stored) : null;
    }catch{ 
      return null;
    } 
  };
  
  function ensureState(){
    if(!state){ 
      state = loadState() || { admin:{passHash:""}, surveys:{}, ui:{lang:"pt"} }; 
      if(!Object.keys(state.surveys).length){ 
        const s = defaultSurvey(); 
        state.surveys[s.id]=s; 
      } 
      saveState(); 
    }
  }

  async function sha256(s){
    try {
      const buf = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(s));
      return [...new Uint8Array(buf)].map(b=>b.toString(16).padStart(2,"0")).join("");
    } catch(e) {
      let hash = 0;
      for (let i = 0; i < s.length; i++) {
        const char = s.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash;
      }
      return Math.abs(hash).toString(16);
    }
  }

  function deviceHashSync(){
    const str = [navigator.userAgent, navigator.language, Intl.DateTimeFormat().resolvedOptions().timeZone, screen.width+"x"+screen.height+"@"+(window.devicePixelRatio||1)].join("|");
    let h = 0; for(let i=0;i<str.length;i++){ h = ((h<<5)-h) + str.charCodeAt(i); h |= 0; }
    return "d_"+(h>>>0).toString(36);
  }

  // Router
  function route(){ 
    const [path, query=""] = (location.hash.slice(1)||"/").split("?"); 
    const params = Object.fromEntries(new URLSearchParams(query).entries()); 
    return {path, params}; 
  }
  addEventListener("hashchange", render);

  // I18N
  const I18N = {
    pt: {
      admin:"Admin", signIn:"Entrar", signOut:"Sair", password:"Senha", loginTitle:"Acesso Administrativo", setPassword:"Defina sua senha de administrador",
      surveys:"Pesquisas", newSurvey:"Nova Pesquisa", edit:"Editar", open:"Visualizar", delete:"Excluir", duplicate:"Duplicar",
      responses:"Respostas", report:"Relatório", settings:"Configurações", save:"Salvar", saved:"Salvo com sucesso!", status:"Status",
      draft:"Rascunho", active:"Ativa", closed:"Encerrada", title:"Título", eventDate:"Data do evento", language:"Idioma padrão", languagesEnabled:"Idiomas habilitados",
      brandColor:"Cor da marca", logo:"Logo", form:"Formulário", general:"Geral",
      addQuestion:"Adicionar Pergunta", customQuestions:"Perguntas Personalizadas", type:"Tipo", required:"Obrigatória", remove:"Remover", up:"↑", down:"↓",
      webhook:"Webhook", exportCSV:"Exportar CSV", exportJSON:"Exportar JSON", importJSON:"Importar JSON",
      printPDF:"Imprimir PDF", shareLink:"Link Público", oneLinkNote:"Use este link para compartilhar com os participantes",
      nps:"NPS", avg:"Média", promoters:"Promotores", detractors:"Detratores",
      quizStart:"Iniciar Pesquisa", next:"Próximo", prev:"Anterior", review:"Revisar", submit:"Enviar", submitting:"Enviando...", submitted:"Resposta enviada com sucesso!",
      alreadyAnswered:"Você já respondeu esta pesquisa.", invalidLink:"Link inválido ou pesquisa inativa.",
      requiredMsg:"Esta pergunta é obrigatória.", scaleHelp_0_10:"0 = não recomendaria; 10 = recomendaria com certeza", scaleHelp_1_5:"1 = muito ruim; 5 = excelente",
      welcomeTitle:"Sistema Profissional de Pesquisas NPS",
      welcomeSubtitle:"Crie pesquisas de satisfação modernas e colete feedback valioso dos participantes dos seus eventos com nossa plataforma intuitiva.",
      getStarted:"Começar Agora",
      learnMore:"Saiba Mais",
      features:"Recursos",
      feature1Title:"Interface Intuitiva",
      feature1Desc:"Design moderno e fácil de usar para criar pesquisas profissionais em minutos.",
      feature2Title:"Análise Avançada",
      feature2Desc:"Relatórios detalhados com métricas NPS e insights valiosos sobre seus eventos.",
      feature3Title:"Totalmente Responsivo",
      feature3Desc:"Funciona perfeitamente em qualquer dispositivo - desktop, tablet ou smartphone.",
      createFirstSurvey:"Criar Primeira Pesquisa",
      noSurveys:"Nenhuma pesquisa criada ainda",
      noSurveysDesc:"Comece criando sua primeira pesquisa de satisfação para coletar feedback dos participantes.",
      surveyCreated:"Pesquisa criada com sucesso!",
      surveyUpdated:"Pesquisa atualizada com sucesso!",
      surveyDeleted:"Pesquisa excluída com sucesso!",
      confirmDelete:"Tem certeza que deseja excluir esta pesquisa? Esta ação não pode ser desfeita.",
      loading:"Carregando...",
      error:"Erro",
      success:"Sucesso"
    },
    en: {
      admin:"Admin", signIn:"Sign In", signOut:"Sign Out", password:"Password", loginTitle:"Administrative Access", setPassword:"Set your administrator password",
      surveys:"Surveys", newSurvey:"New Survey", edit:"Edit", open:"View", delete:"Delete", duplicate:"Duplicate",
      responses:"Responses", report:"Report", settings:"Settings", save:"Save", saved:"Saved successfully!", status:"Status",
      draft:"Draft", active:"Active", closed:"Closed", title:"Title", eventDate:"Event date", language:"Default language", languagesEnabled:"Enabled languages",
      brandColor:"Brand color", logo:"Logo", form:"Form", general:"General",
      addQuestion:"Add Question", customQuestions:"Custom Questions", type:"Type", required:"Required", remove:"Remove", up:"↑", down:"↓",
      webhook:"Webhook", exportCSV:"Export CSV", exportJSON:"Export JSON", importJSON:"Import JSON",
      printPDF:"Print PDF", shareLink:"Public Link", oneLinkNote:"Use this link to share with participants",
      nps:"NPS", avg:"Average", promoters:"Promoters", detractors:"Detractors",
      quizStart:"Start Survey", next:"Next", prev:"Previous", review:"Review", submit:"Submit", submitting:"Submitting...", submitted:"Response submitted successfully!",
      alreadyAnswered:"You have already answered this survey.", invalidLink:"Invalid link or inactive survey.",
      requiredMsg:"This question is required.", scaleHelp_0_10:"0 = would not recommend; 10 = definitely recommend", scaleHelp_1_5:"1 = very poor; 5 = excellent",
      welcomeTitle:"Professional NPS Survey System",
      welcomeSubtitle:"Create modern satisfaction surveys and collect valuable feedback from your event participants with our intuitive platform.",
      getStarted:"Get Started",
      learnMore:"Learn More",
      features:"Features",
      feature1Title:"Intuitive Interface",
      feature1Desc:"Modern and easy-to-use design to create professional surveys in minutes.",
      feature2Title:"Advanced Analytics",
      feature2Desc:"Detailed reports with NPS metrics and valuable insights about your events.",
      feature3Title:"Fully Responsive",
      feature3Desc:"Works perfectly on any device - desktop, tablet or smartphone.",
      createFirstSurvey:"Create First Survey",
      noSurveys:"No surveys created yet",
      noSurveysDesc:"Start by creating your first satisfaction survey to collect participant feedback.",
      surveyCreated:"Survey created successfully!",
      surveyUpdated:"Survey updated successfully!",
      surveyDeleted:"Survey deleted successfully!",
      confirmDelete:"Are you sure you want to delete this survey? This action cannot be undone.",
      loading:"Loading...",
      error:"Error",
      success:"Success"
    },
    es: {
      admin:"Admin", signIn:"Iniciar Sesión", signOut:"Cerrar Sesión", password:"Contraseña", loginTitle:"Acceso Administrativo", setPassword:"Establezca su contraseña de administrador",
      surveys:"Encuestas", newSurvey:"Nueva Encuesta", edit:"Editar", open:"Ver", delete:"Eliminar", duplicate:"Duplicar",
      responses:"Respuestas", report:"Informe", settings:"Configuraciones", save:"Guardar", saved:"¡Guardado exitosamente!", status:"Estado",
      draft:"Borrador", active:"Activa", closed:"Cerrada", title:"Título", eventDate:"Fecha del evento", language:"Idioma predeterminado", languagesEnabled:"Idiomas habilitados",
      brandColor:"Color de marca", logo:"Logo", form:"Formulario", general:"General",
      addQuestion:"Agregar Pregunta", customQuestions:"Preguntas Personalizadas", type:"Tipo", required:"Obligatoria", remove:"Eliminar", up:"↑", down:"↓",
      webhook:"Webhook", exportCSV:"Exportar CSV", exportJSON:"Exportar JSON", importJSON:"Importar JSON",
      printPDF:"Imprimir PDF", shareLink:"Enlace Público", oneLinkNote:"Use este enlace para compartir con los participantes",
      nps:"NPS", avg:"Promedio", promoters:"Promotores", detractors:"Detractores",
      quizStart:"Iniciar Encuesta", next:"Siguiente", prev:"Anterior", review:"Revisar", submit:"Enviar", submitting:"Enviando...", submitted:"¡Respuesta enviada exitosamente!",
      alreadyAnswered:"Ya has respondido esta encuesta.", invalidLink:"Enlace inválido o encuesta inactiva.",
      requiredMsg:"Esta pregunta es obligatoria.", scaleHelp_0_10:"0 = no recomendaría; 10 = definitivamente recomendaría", scaleHelp_1_5:"1 = muy malo; 5 = excelente",
      welcomeTitle:"Sistema Profesional de Encuestas NPS",
      welcomeSubtitle:"Cree encuestas de satisfacción modernas y recopile comentarios valiosos de los participantes de sus eventos con nuestra plataforma intuitiva.",
      getStarted:"Comenzar Ahora",
      learnMore:"Saber Más",
      features:"Características",
      feature1Title:"Interfaz Intuitiva",
      feature1Desc:"Diseño moderno y fácil de usar para crear encuestas profesionales en minutos.",
      feature2Title:"Análisis Avanzado",
      feature2Desc:"Informes detallados con métricas NPS e insights valiosos sobre sus eventos.",
      feature3Title:"Totalmente Responsivo",
      feature3Desc:"Funciona perfectamente en cualquier dispositivo - escritorio, tablet o smartphone.",
      createFirstSurvey:"Crear Primera Encuesta",
      noSurveys:"Aún no se han creado encuestas",
      noSurveysDesc:"Comience creando su primera encuesta de satisfacción para recopilar comentarios de los participantes.",
      surveyCreated:"¡Encuesta creada exitosamente!",
      surveyUpdated:"¡Encuesta actualizada exitosamente!",
      surveyDeleted:"¡Encuesta eliminada exitosamente!",
      confirmDelete:"¿Está seguro de que desea eliminar esta encuesta? Esta acción no se puede deshacer.",
      loading:"Cargando...",
      error:"Error",
      success:"Éxito"
    }
  };
  const t = (k)=> I18N[state?.ui?.lang||"pt"][k] || I18N.pt[k] || k;

  // Default survey
  function defaultSurvey(lang="pt"){
    const l=(pt,en,es)=>({pt,en,es});
    return {
      id: uid("srv_"),
      title: l("Pesquisa de Satisfação do Evento","Event Satisfaction Survey","Encuesta de Satisfacción del Evento"),
      eventDate: todayISO(),
      brandColor:"#6366f1",
      logoDataURL:"",
      status:"draft",
      langDefault: lang,
      langsEnabled:["pt","en","es"],
      webhook:"",
      responses:[],
      answeredDevices: {},
      questions: [
        { id:"q1", kind:"nps", required:true, visible:true,
          label:l(
            "Em uma escala de 0 a 10, o quanto você recomendaria este evento a um amigo ou colega?",
            "On a scale from 0 to 10, how likely are you to recommend this event to a friend or colleague?",
            "En una escala de 0 a 10, ¿qué tan probable es que recomiende este evento a un amigo o colega?"
          ),
          help:l("0 = não recomendaria; 10 = recomendaria com certeza","0 = would not recommend; 10 = definitely recommend","0 = no recomendaría; 10 = definitivamente recomendaría")
        },
        { id:"q2", kind:"likert5", required:true, visible:true, 
          label:l("Organização geral do evento","Overall event organization","Organización general del evento"), 
          help:l("1 = muito ruim; 5 = excelente","1 = very poor; 5 = excellent","1 = muy malo; 5 = excelente") 
        },
        { id:"q3", kind:"likert5", required:true, visible:true, 
          label:l("Qualidade do conteúdo","Content quality","Calidad del contenido") 
        },
        { id:"q4", kind:"textarea", required:true, visible:true, 
          label:l("O que você mais gostou no evento?","What did you like most about the event?","¿Qué le gustó más del evento?") 
        },
        { id:"q5", kind:"textarea", required:true, visible:true, 
          label:l("O que poderia ser melhorado?","What could be improved?","¿Qué se podría mejorar?") 
        },
        { id:"q6", kind:"radio", required:true, visible:true, 
          label:l("Participaria novamente?","Would you attend again?","¿Participaría nuevamente?"),
          options:[{pt:"Sim",en:"Yes",es:"Sí"},{pt:"Não",en:"No",es:"No"},{pt:"Talvez",en:"Maybe",es:"Quizá"}]
        }
      ],
      custom:[]
    };
  }

  // Language switching
  function setupLanguageSwitcher(){
    qsa('.lang-btn').forEach(btn => {
      btn.onclick = () => {
        const lang = btn.id.split('-')[1];
        state.ui.lang = lang;
        saveState();
        qsa('.lang-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        render();
      };
    });
  }

  // Render functions
  function render(){
    ensureState();
    const root = qs("#app");
    const {path, params} = route();

    // Update brand title
    qs("#brandTitle").textContent = "NPS Eventos";
    qs("#nav-admin").textContent = t("admin");
    
    // Setup language switcher
    setupLanguageSwitcher();
    qsa('.lang-btn').forEach(btn => {
      btn.classList.toggle('active', btn.id === `lang-${state.ui.lang}`);
    });

    if(path==="/admin"){ renderAdmin(root); return; }
    if(path.startsWith("/s/")){ const sid=path.split("/")[2]; const s=state.surveys[sid]; renderQuiz(root, s, params); return; }
    if(path.startsWith("/report/")){ const sid=path.split("/")[2]; const s=state.surveys[sid]; renderReport(root, s); return; }

    renderHome(root);
  }

  function renderHome(root){
    root.innerHTML = `
      <section class="hero">
        <div class="container">
          <h1 class="hero-title fade-in">${t("welcomeTitle")}</h1>
          <p class="hero-subtitle fade-in">${t("welcomeSubtitle")}</p>
          <div class="hero-cta fade-in">
            <a href="#/admin" class="btn btn-primary btn-lg">${t("getStarted")}</a>
            <a href="#/demo" class="btn btn-lg">${t("learnMore")}</a>
          </div>
        </div>
      </section>

      <section class="features">
        <div class="container">
          <h2 class="text-center mb-6">${t("features")}</h2>
          <div class="grid grid-3">
            <div class="feature-card card fade-in">
              <div class="feature-icon">📊</div>
              <h3>${t("feature1Title")}</h3>
              <p class="text-secondary">${t("feature1Desc")}</p>
            </div>
            <div class="feature-card card fade-in">
              <div class="feature-icon">📈</div>
              <h3>${t("feature2Title")}</h3>
              <p class="text-secondary">${t("feature2Desc")}</p>
            </div>
            <div class="feature-card card fade-in">
              <div class="feature-icon">📱</div>
              <h3>${t("feature3Title")}</h3>
              <p class="text-secondary">${t("feature3Desc")}</p>
            </div>
          </div>
        </div>
      </section>
    `;
  }

  // Admin functions
  function adminLogged(){ 
    try {
      return !!state.admin.passHash && sessionStorage.getItem("admin_ok")==="1";
    } catch(e) {
      return false;
    }
  }

  function renderAdmin(root){
    if(!adminLogged()){
      root.innerHTML = `
        <div class="container" style="padding-top: 4rem;">
          <div class="card card-elevated" style="max-width: 400px; margin: 0 auto;">
            <div class="text-center mb-6">
              <h2>${t("loginTitle")}</h2>
              <p class="text-secondary">${state.admin.passHash ? "" : t("setPassword")}</p>
            </div>
            <form id="loginForm" class="flex-col">
              <div class="form-group">
                <label class="form-label">${t("password")}</label>
                <input type="password" id="adminPass" class="form-input" required>
              </div>
              <button type="submit" class="btn btn-primary">${t("signIn")}</button>
            </form>
          </div>
        </div>
      `;
      
      qs("#loginForm").onsubmit = async (e) => {
        e.preventDefault();
        const pass = qs("#adminPass").value;
        const hash = await sha256(pass);
        if(!state.admin.passHash){ 
          state.admin.passHash=hash; 
          saveState(); 
          try { sessionStorage.setItem("admin_ok","1"); } catch(e) {}
          showNotification(t("success"), "success");
          render(); 
        }
        else if(hash===state.admin.passHash){ 
          try { sessionStorage.setItem("admin_ok","1"); } catch(e) {}
          showNotification(t("success"), "success");
          render(); 
        }
        else {
          showNotification("Senha incorreta", "error");
        }
      };
      return;
    }

    const surveys = Object.values(state.surveys).sort((a,b)=>(b.eventDate||"").localeCompare(a.eventDate||""));
    
    root.innerHTML = `
      <div class="container" style="padding-top: 2rem;">
        <div class="flex-between mb-6">
          <div>
            <h1>${t("surveys")}</h1>
            <p class="text-secondary">Gerencie suas pesquisas de satisfação</p>
          </div>
          <div class="flex gap-4">
            <button class="btn btn-primary" id="newSurvey">${t("newSurvey")}</button>
            <button class="btn btn-ghost" id="signOut">${t("signOut")}</button>
          </div>
        </div>

        ${surveys.length === 0 ? `
          <div class="card text-center" style="padding: 4rem 2rem;">
            <div class="feature-icon" style="margin: 0 auto 2rem;">📝</div>
            <h3>${t("noSurveys")}</h3>
            <p class="text-secondary mb-4">${t("noSurveysDesc")}</p>
            <button class="btn btn-primary" id="createFirst">${t("createFirstSurvey")}</button>
          </div>
        ` : `
          <div class="table-container">
            <table class="table">
              <thead>
                <tr>
                  <th>${t("title")}</th>
                  <th>${t("eventDate")}</th>
                  <th>${t("status")}</th>
                  <th>${t("responses")}</th>
                  <th>Ações</th>
                </tr>
              </thead>
              <tbody>
                ${surveys.map(s=>`
                  <tr>
                    <td>
                      <div class="font-semibold">${s.title[state.ui.lang]||s.title.pt}</div>
                    </td>
                    <td>${s.eventDate}</td>
                    <td><span class="status status-${s.status}">${t(s.status)}</span></td>
                    <td><span class="font-semibold">${s.responses.length}</span></td>
                    <td>
                      <div class="flex gap-2">
                        <button class="btn btn-sm" data-edit="${s.id}">${t("edit")}</button>
                        <a class="btn btn-sm" href="#/report/${s.id}">${t("report")}</a>
                        <a class="btn btn-sm btn-primary" href="#/s/${s.id}">${t("open")}</a>
                        <button class="btn btn-sm" data-dup="${s.id}">${t("duplicate")}</button>
                        <button class="btn btn-sm btn-error" data-del="${s.id}">${t("delete")}</button>
                      </div>
                    </td>
                  </tr>
                `).join("")}
              </tbody>
            </table>
          </div>
        `}

        <div id="editPanel" class="hidden mt-6"></div>
      </div>
    `;

    // Event handlers
    qs("#signOut")?.addEventListener("click", () => {
      try { sessionStorage.removeItem("admin_ok"); } catch(e) {}
      render();
    });

    const newSurveyHandler = () => {
      const s = defaultSurvey(state.ui.lang);
      state.surveys[s.id] = s;
      saveState();
      showNotification(t("surveyCreated"), "success");
      render();
    };

    qs("#newSurvey")?.addEventListener("click", newSurveyHandler);
    qs("#createFirst")?.addEventListener("click", newSurveyHandler);

    // Survey actions
    qsa("[data-del]").forEach(btn => {
      btn.addEventListener("click", () => {
        if(confirm(t("confirmDelete"))){
          const id = btn.getAttribute("data-del");
          delete state.surveys[id];
          saveState();
          showNotification(t("surveyDeleted"), "success");
          render();
        }
      });
    });

    qsa("[data-dup]").forEach(btn => {
      btn.addEventListener("click", () => {
        const id = btn.getAttribute("data-dup");
        const s = JSON.parse(JSON.stringify(state.surveys[id]));
        s.id = uid("srv_");
        s.responses = [];
        s.answeredDevices = {};
        s.status = "draft";
        state.surveys[s.id] = s;
        saveState();
        showNotification(t("surveyCreated"), "success");
        render();
      });
    });

    qsa("[data-edit]").forEach(btn => {
      btn.addEventListener("click", () => {
        const id = btn.getAttribute("data-edit");
        renderEditPanel(id);
      });
    });

    // Check for edit parameter
    const {params} = route();
    if(params.edit && state.surveys[params.edit]){
      renderEditPanel(params.edit);
    }
  }

  function renderEditPanel(surveyId){
    const survey = state.surveys[surveyId];
    if(!survey) return;

    const panel = qs("#editPanel");
    panel.classList.remove("hidden");
    
    panel.innerHTML = `
      <div class="card card-elevated">
        <div class="flex-between mb-6">
          <h2>Editar Pesquisa</h2>
          <button class="btn btn-ghost" id="closeEdit">✕</button>
        </div>

        <div class="grid grid-2 mb-6">
          <div class="form-group">
            <label class="form-label">${t("title")} (PT)</label>
            <input type="text" id="titlePt" class="form-input" value="${survey.title.pt||""}">
          </div>
          <div class="form-group">
            <label class="form-label">${t("title")} (EN)</label>
            <input type="text" id="titleEn" class="form-input" value="${survey.title.en||""}">
          </div>
          <div class="form-group">
            <label class="form-label">${t("title")} (ES)</label>
            <input type="text" id="titleEs" class="form-input" value="${survey.title.es||""}">
          </div>
          <div class="form-group">
            <label class="form-label">${t("eventDate")}</label>
            <input type="date" id="eventDate" class="form-input" value="${survey.eventDate||""}">
          </div>
          <div class="form-group">
            <label class="form-label">${t("brandColor")}</label>
            <input type="color" id="brandColor" class="form-input" value="${survey.brandColor}">
          </div>
          <div class="form-group">
            <label class="form-label">${t("status")}</label>
            <select id="status" class="form-select">
              <option value="draft" ${survey.status==="draft"?"selected":""}>${t("draft")}</option>
              <option value="active" ${survey.status==="active"?"selected":""}>${t("active")}</option>
              <option value="closed" ${survey.status==="closed"?"selected":""}>${t("closed")}</option>
            </select>
          </div>
        </div>

        <div class="flex-between mb-4">
          <button class="btn btn-primary" id="saveSurvey">${t("save")}</button>
          <div class="flex gap-4">
            <a href="#/s/${survey.id}" class="btn">${t("open")}</a>
            <a href="#/report/${survey.id}" class="btn">${t("report")}</a>
          </div>
        </div>

        <div class="card" style="background: var(--bg-secondary); padding: 1rem;">
          <div class="form-group">
            <label class="form-label">${t("shareLink")}</label>
            <div class="flex gap-2">
              <input type="text" class="form-input" readonly value="${location.origin}${location.pathname}#/s/${survey.id}?lang=${survey.langDefault}" id="shareUrl">
              <button class="btn" id="copyLink">Copiar</button>
            </div>
            <p class="text-muted" style="font-size: 0.8rem; margin-top: 0.5rem;">${t("oneLinkNote")}</p>
          </div>
        </div>
      </div>
    `;

    // Event handlers
    qs("#closeEdit").addEventListener("click", () => {
      panel.classList.add("hidden");
      history.replaceState(null, "", "#/admin");
    });

    qs("#saveSurvey").addEventListener("click", () => {
      survey.title.pt = qs("#titlePt").value.trim();
      survey.title.en = qs("#titleEn").value.trim();
      survey.title.es = qs("#titleEs").value.trim();
      survey.eventDate = qs("#eventDate").value;
      survey.brandColor = qs("#brandColor").value;
      survey.status = qs("#status").value;
      saveState();
      showNotification(t("surveyUpdated"), "success");
      render();
    });

    qs("#copyLink").addEventListener("click", async () => {
      const url = qs("#shareUrl").value;
      try {
        await navigator.clipboard.writeText(url);
        showNotification("Link copiado!", "success");
      } catch(e) {
        showNotification("Erro ao copiar link", "error");
      }
    });

    // Update URL
    history.replaceState(null, "", `#/admin?edit=${surveyId}`);
  }

  // Quiz rendering
  function renderQuiz(root, survey, params){
    if(!survey || survey.status !== "active"){
      root.innerHTML = `
        <div class="container quiz-container">
          <div class="quiz-card text-center">
            <div class="feature-icon" style="margin: 0 auto 2rem;">⚠️</div>
            <h2>${t("invalidLink")}</h2>
            <p class="text-secondary mb-4">A pesquisa pode estar inativa ou o link pode estar incorreto.</p>
            <a href="#/" class="btn btn-primary">← Voltar ao início</a>
          </div>
        </div>
      `;
      return;
    }

    const langParam = params.lang;
    const lang = (langParam && survey.langsEnabled.includes(langParam)) ? langParam : survey.langDefault;
    state.ui.lang = lang;
    saveState();

    // Check if already answered
    const dev = deviceHashSync();
    const cookieKey = `nps_${survey.id}_answered`;
    let alreadyAnswered = false;
    try {
      alreadyAnswered = localStorage.getItem(cookieKey) === "1" || 
                       survey.answeredDevices?.[dev] || 
                       document.cookie.includes(`${cookieKey}=1`);
    } catch(e) {}

    if(alreadyAnswered){
      root.innerHTML = `
        <div class="container quiz-container">
          <div class="quiz-card text-center">
            <div class="feature-icon" style="margin: 0 auto 2rem;">✅</div>
            <h2>${survey.title[lang]||survey.title.pt}</h2>
            <p class="text-secondary mb-4">${t("alreadyAnswered")}</p>
            <a href="#/" class="btn btn-primary">← Voltar ao início</a>
          </div>
        </div>
      `;
      return;
    }

    // Get visible questions
    const questions = survey.questions.filter(q => q.visible !== false).concat(survey.custom || []);
    
    root.innerHTML = `
      <div class="container quiz-container">
        <div class="quiz-card">
          <div class="quiz-header">
            <h2>${survey.title[lang]||survey.title.pt}</h2>
            <div class="progress">
              <div class="progress-bar" id="progressBar" style="width: 5%"></div>
            </div>
            <p class="text-muted">Pergunta <span id="currentQ">1</span> de ${questions.length}</p>
          </div>
          
          <div id="questionContainer"></div>
          
          <div class="quiz-navigation">
            <button class="btn" id="prevBtn" disabled>${t("prev")}</button>
            <div class="flex gap-2">
              <button class="btn" id="reviewBtn" style="display: none">${t("review")}</button>
              <button class="btn btn-primary" id="nextBtn">${t("next")}</button>
            </div>
          </div>
        </div>
      </div>
    `;

    let currentIndex = 0;
    const answers = {};

    function qLabel(q){ return (q.label?.[lang] || q.label?.pt || "") }
    function qHelp(q){ return (q.help?.[lang] || q.help?.pt || "") }

    function renderQuestion(index){
      const q = questions[index];
      const container = qs("#questionContainer");
      
      let html = `
        <div class="quiz-question fade-in">
          <h3>${qLabel(q)}</h3>
          ${qHelp(q) ? `<p class="quiz-help">${qHelp(q)}</p>` : ""}
      `;

      if(q.kind === "nps"){
        html += `
          <div class="scale-container">
            ${Array.from({length: 11}, (_, i) => `
              <button type="button" class="scale-btn" data-value="${i}">${i}</button>
            `).join("")}
          </div>
        `;
      } else if(q.kind === "likert5"){
        html += `
          <div class="scale-container">
            ${Array.from({length: 5}, (_, i) => `
              <button type="button" class="scale-btn" data-value="${i+1}">${i+1}</button>
            `).join("")}
          </div>
        `;
      } else if(q.kind === "textarea"){
        html += `<textarea class="form-textarea" id="answer_${q.id}" placeholder="Digite sua resposta...">${answers[q.id] || ""}</textarea>`;
      } else if(q.kind === "text"){
        html += `<input type="text" class="form-input" id="answer_${q.id}" placeholder="Digite sua resposta..." value="${answers[q.id] || ""}">`;
      } else if(q.kind === "radio"){
        const options = q.options || [];
        html += `<div class="flex-col gap-2">`;
        options.forEach((opt, i) => {
          const optText = typeof opt === "string" ? opt : (opt[lang] || opt.pt || "");
          html += `
            <label class="flex gap-2" style="cursor: pointer;">
              <input type="radio" name="answer_${q.id}" value="${optText}" ${answers[q.id] === optText ? "checked" : ""}>
              <span>${optText}</span>
            </label>
          `;
        });
        html += `</div>`;
      }

      html += `</div>`;
      container.innerHTML = html;

      // Setup scale buttons
      qsa(".scale-btn").forEach(btn => {
        if(answers[q.id] == btn.dataset.value){
          btn.classList.add("selected");
        }
        btn.addEventListener("click", () => {
          qsa(".scale-btn").forEach(b => b.classList.remove("selected"));
          btn.classList.add("selected");
          answers[q.id] = parseInt(btn.dataset.value);
        });
      });

      // Setup text inputs
      const textInput = qs(`#answer_${q.id}`);
      if(textInput){
        textInput.addEventListener("input", (e) => {
          answers[q.id] = e.target.value;
        });
      }

      // Setup radio buttons
      qsa(`input[name="answer_${q.id}"]`).forEach(radio => {
        radio.addEventListener("change", (e) => {
          answers[q.id] = e.target.value;
        });
      });

      // Update progress
      const progress = Math.round(((index + 1) / questions.length) * 100);
      qs("#progressBar").style.width = Math.max(5, progress) + "%";
      qs("#currentQ").textContent = index + 1;

      // Update navigation
      qs("#prevBtn").disabled = index === 0;
      const isLast = index === questions.length - 1;
      qs("#nextBtn").style.display = isLast ? "none" : "inline-flex";
      qs("#reviewBtn").style.display = isLast ? "inline-flex" : "none";
    }

    function validateCurrent(){
      const q = questions[currentIndex];
      if(!q.required) return true;
      
      const answer = answers[q.id];
      if(q.kind === "nps" || q.kind === "likert5"){
        return answer !== undefined && answer !== null;
      }
      if(q.kind === "text" || q.kind === "textarea"){
        return answer && answer.trim().length > 0;
      }
      if(q.kind === "radio"){
        return answer && answer.length > 0;
      }
      return true;
    }

    // Navigation handlers
    qs("#nextBtn").addEventListener("click", () => {
      if(!validateCurrent()){
        showNotification(t("requiredMsg"), "error");
        return;
      }
      if(currentIndex < questions.length - 1){
        currentIndex++;
        renderQuestion(currentIndex);
      }
    });

    qs("#prevBtn").addEventListener("click", () => {
      if(currentIndex > 0){
        currentIndex--;
        renderQuestion(currentIndex);
      }
    });

    qs("#reviewBtn").addEventListener("click", () => {
      if(!validateCurrent()){
        showNotification(t("requiredMsg"), "error");
        return;
      }
      submitSurvey();
    });

    async function submitSurvey(){
      const btn = qs("#reviewBtn");
      btn.disabled = true;
      btn.innerHTML = `<span class="spinner"></span> ${t("submitting")}`;

      const response = {
        id: uid("resp_"),
        at: new Date().toISOString(),
        lang,
        device: dev,
        answers
      };

      // Save response
      survey.responses.push(response);
      survey.answeredDevices[dev] = response.id;
      saveState();

      // Mark as answered
      try {
        localStorage.setItem(cookieKey, "1");
        document.cookie = `${cookieKey}=1; max-age=31536000; path=/`;
      } catch(e) {}

      // Send webhook if configured
      if(survey.webhook){
        try {
          await fetch(survey.webhook, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(response)
          });
        } catch(e) {
          console.warn('Webhook failed:', e);
        }
      }

      // Show success
      root.innerHTML = `
        <div class="container quiz-container">
          <div class="quiz-card text-center">
            <div class="feature-icon" style="margin: 0 auto 2rem;">🎉</div>
            <h2>${t("submitted")}</h2>
            <p class="text-secondary mb-4">Obrigado por participar da nossa pesquisa!</p>
            <a href="#/" class="btn btn-primary">← Voltar ao início</a>
          </div>
        </div>
      `;
    }

    // Start with first question
    renderQuestion(0);
  }

  // Report rendering
  function renderReport(root, survey){
    if(!survey){
      root.innerHTML = `
        <div class="container" style="padding-top: 4rem;">
          <div class="card text-center">
            <h2>Pesquisa não encontrada</h2>
            <a href="#/admin" class="btn btn-primary">← Voltar</a>
          </div>
        </div>
      `;
      return;
    }

    const responses = survey.responses || [];
    const npsQ = survey.questions.find(q => q.kind === "nps");
    let npsScore = null;
    let promoters = 0, detractors = 0, passives = 0;

    if(npsQ && responses.length){
      const scores = responses.map(r => r.answers[npsQ.id]).filter(s => s != null);
      if(scores.length){
        promoters = scores.filter(s => s >= 9).length;
        detractors = scores.filter(s => s <= 6).length;
        passives = scores.filter(s => s === 7 || s === 8).length;
        npsScore = Math.round(((promoters - detractors) / scores.length) * 100);
      }
    }

    root.innerHTML = `
      <div class="container" style="padding-top: 2rem;">
        <div class="flex-between mb-6">
          <div>
            <h1>${survey.title[state.ui.lang] || survey.title.pt} - ${t("report")}</h1>
            <p class="text-secondary">Relatório de respostas e métricas</p>
          </div>
          <a href="#/admin" class="btn">← ${t("admin")}</a>
        </div>

        <div class="grid grid-3 mb-6">
          <div class="card text-center">
            <div class="feature-icon" style="margin: 0 auto 1rem;">📊</div>
            <h3>${t("responses")}</h3>
            <div style="font-size: 2rem; font-weight: 700; color: var(--brand-primary);">${responses.length}</div>
          </div>
          
          ${npsScore !== null ? `
            <div class="card text-center">
              <div class="feature-icon" style="margin: 0 auto 1rem;">⭐</div>
              <h3>${t("nps")}</h3>
              <div style="font-size: 2rem; font-weight: 700; color: ${npsScore >= 50 ? 'var(--success)' : npsScore >= 0 ? 'var(--warning)' : 'var(--error)'};">${npsScore}</div>
            </div>
            
            <div class="card text-center">
              <div class="feature-icon" style="margin: 0 auto 1rem;">👥</div>
              <h3>Distribuição</h3>
              <div class="text-secondary" style="font-size: 0.9rem;">
                <div>Promotores: <span style="color: var(--success); font-weight: 600;">${promoters}</span></div>
                <div>Passivos: <span style="color: var(--warning); font-weight: 600;">${passives}</span></div>
                <div>Detratores: <span style="color: var(--error); font-weight: 600;">${detractors}</span></div>
              </div>
            </div>
          ` : `
            <div class="card text-center">
              <div class="feature-icon" style="margin: 0 auto 1rem;">📈</div>
              <h3>Análise</h3>
              <p class="text-secondary">Dados disponíveis após as primeiras respostas</p>
            </div>
          `}
        </div>

        <div class="card">
          <div class="flex-between mb-4">
            <h3>Ações</h3>
            <div class="flex gap-2">
              <button class="btn" onclick="exportData('${survey.id}', 'csv')">${t("exportCSV")}</button>
              <button class="btn" onclick="exportData('${survey.id}', 'json')">${t("exportJSON")}</button>
              <button class="btn" onclick="window.print()">${t("printPDF")}</button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Utility functions
  function showNotification(message, type = "info"){
    const notification = document.createElement("div");
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === "success" ? "var(--success)" : type === "error" ? "var(--error)" : "var(--brand-primary)"};
      color: white;
      padding: 1rem 1.5rem;
      border-radius: var(--radius);
      box-shadow: var(--shadow-lg);
      z-index: 1000;
      animation: slideIn 0.3s ease-out;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.animation = "slideOut 0.3s ease-out";
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  function exportData(surveyId, format){
    const survey = state.surveys[surveyId];
    if(!survey) return;

    if(format === "csv"){
      const csv = exportCSV(survey);
      downloadBlob(csv, `${survey.title.pt || "pesquisa"}_respostas.csv`, "text/csv;charset=utf-8");
    } else if(format === "json"){
      const json = JSON.stringify(survey, null, 2);
      downloadBlob(json, `${survey.title.pt || "pesquisa"}.json`, "application/json");
    }
  }

  function exportCSV(survey){
    const header = ["responseId", "timestamp", "lang", "device"];
    const qids = [];
    survey.questions.forEach(q => qids.push(q.id));
    survey.custom.forEach(q => qids.push(q.id));
    const all = header.concat(qids);
    const rows = [all];
    
    survey.responses.forEach(r => {
      const row = [r.id, r.at, r.lang, r.device];
      qids.forEach(id => {
        let v = r.answers[id];
        if(Array.isArray(v)) v = v.join(" | ");
        row.push(v ?? "");
      });
      rows.push(row);
    });
    
    return rows.map(r => r.map(c => `"${(c??"").toString().replace(/"/g,'""')}"`).join(",")).join("\n");
  }

  function downloadBlob(content, filename, type){
    const blob = new Blob([content], {type});
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = filename;
    a.click();
    setTimeout(() => URL.revokeObjectURL(a.href), 1000);
  }

  // Initialize
  render();
  </script>
</body>
</html>

