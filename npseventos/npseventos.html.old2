<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>NPS Eventos — Quiz</title>
  <meta name="color-scheme" content="light dark">
  <style>
    :root{
      --bg: #0b0c0f;
      --card: #12141a;
      --muted: #1a1f2a;
      --text: #e6e8f0;
      --subtext: #aab0c0;
      --brand: #ff5a3c;
      --ok: #16c67a;
      --warn: #f59e0b;
      --bad: #ef4444;
      --border: #2a2f3a;
      --focus: 0 0 0 3px rgba(255,90,60,.35);
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font: 15px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,"Helvetica Neue",Arial,"Noto Sans";
      color:var(--text); background:linear-gradient(180deg,#0b0c0f 0,#0e1116 100%); background-attachment:fixed;
    }
    a{color:var(--brand); text-decoration:none}
    a:hover{text-decoration:underline}
    header.app{
      position:sticky; top:0; z-index:10; backdrop-filter:saturate(140%) blur(10px);
      background:rgba(11,12,15,.7); border-bottom:1px solid var(--border)
    }
    .container{max-width:960px; margin:0 auto; padding:16px}
    .row{display:flex; gap:10px; flex-wrap:wrap; align-items:center}
    .spacer{flex:1}
    .card{
      background:linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,0));
      border:1px solid var(--border); border-radius:14px; padding:16px;
      box-shadow: 0 8px 26px rgba(0,0,0,.25);
    }
    .notice{background:#0a1320;border:1px solid #14223b;color:#c9d8ff;padding:10px 12px;border-radius:10px}
    .muted{color:var(--subtext)}
    h1,h2,h3{margin:.2em 0 .4em}
    h1{font-size:1.6rem} h2{font-size:1.25rem} h3{font-size:1.05rem}
    .btn{
      appearance:none; border:1px solid var(--border); background:var(--card); color:var(--text);
      padding:10px 14px; border-radius:10px; cursor:pointer; transition:.15s ease;
    }
    .btn.primary{border-color:transparent; background:var(--brand); color:#0b0c0f; font-weight:700}
    .btn.ghost{background:transparent}
    .btn.warn{background:var(--warn); color:#0b0c0f; border-color:transparent}
    .btn.bad{background:var(--bad); color:#fff; border-color:transparent}
    .btn.ok{background:var(--ok); color:#0b0c0f; border-color:transparent}
    .btn.small{padding:6px 10px; font-size:.9rem}
    .toolbar{display:flex; gap:8px; align-items:center; flex-wrap:wrap}
    .status{padding:4px 8px; border-radius:999px; font-weight:700}
    .status.draft{background:#374151;color:#fff}
    .status.active{background:#10b981;color:#0b0c0f}
    .status.closed{background:#6b7280;color:#fff}
    .table{width:100%; border-collapse:collapse}
    .table th,.table td{border-bottom:1px solid var(--border); padding:10px; text-align:left}
    input[type="text"], input[type="email"], input[type="url"], select, textarea{
      width:100%; padding:10px 12px; border-radius:10px; border:1px solid var(--border); background:var(--card); color:var(--text)
    }
    textarea{min-height:90px; resize:vertical}

    /* Quiz */
    .quiz-wrap{max-width:780px; margin:0 auto}
    .progress{height:10px; background:#1f2430; border-radius:999px; overflow:hidden; margin:8px 0 14px}
    .progress > span{display:block; height:100%; background:var(--brand); transition:width .25s ease}
    .qstep{display:none}
    .qstep.active{display:block; animation:fade .25s ease}
    @keyframes fade{from{opacity:.4; transform:translateY(4px)} to{opacity:1; transform:translateY(0)}}
    .scale{display:flex; gap:6px; flex-wrap:wrap}
    .pill{
      padding:10px 12px; border-radius:10px; border:1px solid var(--border); background:var(--card); cursor:pointer; min-width:40px; text-align:center
    }
    .pill[aria-checked="true"]{background:var(--brand); color:#0b0c0f; border-color:transparent; font-weight:800}
    .options{display:flex; flex-direction:column; gap:8px}
    .chip{display:inline-flex; align-items:center; gap:8px; padding:8px 12px; border-radius:999px; border:1px solid var(--border); background:var(--card); cursor:pointer}
    .chips{display:flex; flex-wrap:wrap; gap:8px}
    .logo{height:36px; width:auto; border-radius:8px; background:#fff; object-fit:contain}
    .kbd{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono"; padding:2px 6px; border:1px solid var(--border); border-radius:6px; background:var(--card)}
    .sr-only{position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden}
    @media print { header.app, .no-print{display:none !important} body{background:#fff; color:#000} .card{box-shadow:none; border:1px solid #ddd} }
  </style>
</head>
<body>
  <header class="app">
    <div class="container row">
      <div class="row" style="gap:10px">
        <img id="brandLogo" class="logo" alt="Logo" src="" style="display:none">
        <strong id="brandTitle">NPS Eventos</strong>
        <span id="surveyBadge" class="status draft" style="display:none"></span>
      </div>
      <div class="spacer"></div>
      <nav class="toolbar">
        <button class="btn small" id="lang-pt">PT</button>
        <button class="btn small" id="lang-en">EN</button>
        <button class="btn small" id="lang-es">ES</button>
        <a class="btn small" id="nav-admin" href="#/admin"></a>
      </nav>
    </div>
  </header>

  <main class="container" id="app"></main>

  <script>
  // ===== Utils =====
  const qs = (s, el=document)=>el.querySelector(s);
  const qsa = (s, el=document)=>[...el.querySelectorAll(s)];
  const uid = (p="") => p + Math.random().toString(36).slice(2,10) + Date.now().toString(36).slice(-4);
  const todayISO = ()=> new Date().toISOString().slice(0,10);
  const clamp = (v,min,max)=>Math.max(min,Math.min(max,v));
  const LS_KEY='nps_quiz_state_v2';

  let state = null;
  const saveState = ()=>localStorage.setItem(LS_KEY, JSON.stringify(state));
  const loadState = ()=>{ try{ return JSON.parse(localStorage.getItem(LS_KEY)||"null")}catch{ return null } };
  function ensureState(){
    if(!state){ state = loadState() || { admin:{passHash:""}, surveys:{}, ui:{lang:"pt"} }; if(!Object.keys(state.surveys).length){ const s = defaultSurvey(); state.surveys[s.id]=s; } saveState(); }
  }

  async function sha256(s){
    const buf = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(s));
    return [...new Uint8Array(buf)].map(b=>b.toString(16).padStart(2,"0")).join("");
  }

  function deviceHashSync(){
    // fingerprint simples: UA + lang + tz + screen
    const str = [navigator.userAgent, navigator.language, Intl.DateTimeFormat().resolvedOptions().timeZone, screen.width+"x"+screen.height+"@"+(window.devicePixelRatio||1)].join("|");
    // hash rápido (não-criptográfico) só para MVP
    let h = 0; for(let i=0;i<str.length;i++){ h = ((h<<5)-h) + str.charCodeAt(i); h |= 0; }
    return "d_"+(h>>>0).toString(36);
  }

  // Router
  function route(){ const [path, query=""] = (location.hash.slice(1)||"/").split("?"); const params = Object.fromEntries(new URLSearchParams(query).entries()); return {path, params}; }
  addEventListener("hashchange", render);

  // I18N (UI)
  const I18N = {
    pt: {
      admin:"Admin", signIn:"Entrar", signOut:"Sair", password:"Senha", loginTitle:"Acesso do Administrador", setPassword:"Defina sua senha",
      surveys:"Pesquisas", newSurvey:"Nova pesquisa", edit:"Editar", open:"Abrir público", delete:"Excluir", duplicate:"Duplicar",
      responses:"Respostas", report:"Relatório", settings:"Configurações", save:"Salvar", saved:"Salvo.", status:"Status",
      draft:"Rascunho", active:"Ativa", closed:"Encerrada", title:"Título", eventDate:"Data do evento", language:"Idioma padrão", languagesEnabled:"Idiomas habilitados",
      brandColor:"Cor da marca", logo:"Logo (PNG/SVG)", form:"Formulário", general:"Geral", dimensions:"Dimensões",
      sessions:"Palestras/Sessões", logistics:"Logística e Comunicação", value:"Valor e intenção futura", profile:"Perfil (opcional)", consents:"Consentimentos (opcional)",
      addQuestion:"Adicionar pergunta", customQuestions:"Perguntas personalizadas", type:"Tipo", required:"Obrigatória", remove:"Remover", up:"Acima", down:"Abaixo",
      webhook:"Webhook de envio (Google Sheets/Automação)", exportCSV:"Exportar CSV", exportJSON:"Exportar JSON", importJSON:"Importar JSON",
      printPDF:"Imprimir/Salvar PDF", shareLink:"Link público", oneLinkNote:"Link único para todos responderem. Limitação por dispositivo.",
      nps:"NPS", avg:"Média", promoters:"Promotores", detractors:"Detratores", resume:"Resumo",
      quizStart:"Iniciar", next:"Próximo", prev:"Anterior", review:"Revisar", submit:"Enviar", submitting:"Enviando...", submitted:"Resposta enviada. Obrigado!",
      alreadyAnswered:"Você já respondeu esta pesquisa neste dispositivo.", invalidLink:"Link inválido ou pesquisa inativa.",
      requiredMsg:"Responda para continuar.", scaleHelp_0_10:"0 = não recomendaria; 10 = recomendaria com certeza", scaleHelp_1_5:"1 = muito ruim; 5 = excelente",
      editBase:"Perguntas base", visible:"Visível", labelPT:"Rótulo (PT)", labelEN:"Rótulo (EN)", labelES:"Rótulo (ES)", helpPT:"Ajuda (PT)", helpEN:"Ajuda (EN)", helpES:"Ajuda (ES)"
    },
    en: {
      admin:"Admin", signIn:"Sign in", signOut:"Sign out", password:"Password", loginTitle:"Administrator Access", setPassword:"Set your password",
      surveys:"Surveys", newSurvey:"New survey", edit:"Edit", open:"Open public", delete:"Delete", duplicate:"Duplicate",
      responses:"Responses", report:"Report", settings:"Settings", save:"Save", saved:"Saved.", status:"Status",
      draft:"Draft", active:"Active", closed:"Closed", title:"Title", eventDate:"Event date", language:"Default language", languagesEnabled:"Enabled languages",
      brandColor:"Brand color", logo:"Logo (PNG/SVG)", form:"Form", general:"General", dimensions:"Dimensions",
      sessions:"Sessions", logistics:"Logistics & Communication", value:"Value & future intent", profile:"Profile (optional)", consents:"Consents (optional)",
      addQuestion:"Add question", customQuestions:"Custom questions", type:"Type", required:"Required", remove:"Remove", up:"Up", down:"Down",
      webhook:"Submit webhook (Google Sheets/Automation)", exportCSV:"Export CSV", exportJSON:"Export JSON", importJSON:"Import JSON",
      printPDF:"Print/Save PDF", shareLink:"Public link", oneLinkNote:"Single link for everyone. Device-based limiting.",
      nps:"NPS", avg:"Average", promoters:"Promoters", detractors:"Detractors", resume:"Summary",
      quizStart:"Start", next:"Next", prev:"Previous", review:"Review", submit:"Submit", submitting:"Submitting...", submitted:"Response sent. Thank you!",
      alreadyAnswered:"You have already answered this survey on this device.", invalidLink:"Invalid link or inactive survey.",
      requiredMsg:"Please answer to continue.", scaleHelp_0_10:"0 = would not recommend; 10 = definitely recommend", scaleHelp_1_5:"1 = very poor; 5 = excellent",
      editBase:"Base questions", visible:"Visible", labelPT:"Label (PT)", labelEN:"Label (EN)", labelES:"Label (ES)", helpPT:"Help (PT)", helpEN:"Help (EN)", helpES:"Help (ES)"
    },
    es: {
      admin:"Admin", signIn:"Iniciar sesión", signOut:"Cerrar sesión", password:"Contraseña", loginTitle:"Acceso del Administrador", setPassword:"Defina su contraseña",
      surveys:"Encuestas", newSurvey:"Nueva encuesta", edit:"Editar", open:"Abrir público", delete:"Eliminar", duplicate:"Duplicar",
      responses:"Respuestas", report:"Informe", settings:"Configuraciones", save:"Guardar", saved:"Guardado.", status:"Estado",
      draft:"Borrador", active:"Activa", closed:"Cerrada", title:"Título", eventDate:"Fecha del evento", language:"Idioma predeterminado", languagesEnabled:"Idiomas habilitados",
      brandColor:"Color de marca", logo:"Logo (PNG/SVG)", form:"Formulario", general:"General", dimensions:"Dimensiones",
      sessions:"Sesiones", logistics:"Logística y Comunicación", value:"Valor e intención futura", profile:"Perfil (opcional)", consents:"Consentimientos (opcional)",
      addQuestion:"Agregar pregunta", customQuestions:"Preguntas personalizadas", type:"Tipo", required:"Obligatoria", remove:"Eliminar", up:"Arriba", down:"Abajo",
      webhook:"Webhook de envío (Google Sheets/Automatización)", exportCSV:"Exportar CSV", exportJSON:"Exportar JSON", importJSON:"Importar JSON",
      printPDF:"Imprimir/Guardar PDF", shareLink:"Enlace público", oneLinkNote:"Un solo enlace para todos. Límite por dispositivo.",
      nps:"NPS", avg:"Media", promoters:"Promotores", detractors:"Detractores", resume:"Resumen",
      quizStart:"Comenzar", next:"Siguiente", prev:"Anterior", review:"Revisar", submit:"Enviar", submitting:"Enviando...", submitted:"Respuesta enviada. ¡Gracias!",
      alreadyAnswered:"Ya respondió esta encuesta en este dispositivo.", invalidLink:"Enlace inválido o encuesta inactiva.",
      requiredMsg:"Responda para continuar.", scaleHelp_0_10:"0 = no recomendaría; 10 = definitivamente recomendaría", scaleHelp_1_5:"1 = muy malo; 5 = excelente",
      editBase:"Preguntas base", visible:"Visible", labelPT:"Etiqueta (PT)", labelEN:"Etiqueta (EN)", labelES:"Etiqueta (ES)", helpPT:"Ayuda (PT)", helpEN:"Ayuda (EN)", helpES:"Ayuda (ES)"
    }
  };
  const t = (k)=> I18N[state.ui.lang||"pt"][k] || I18N.pt[k] || k;

  // Default survey (baseado no seu formulário)
  function defaultSurvey(lang="pt"){
    const l=(pt,en,es)=>({pt,en,es});
    return {
      id: uid("srv_"),
      title: l("Ellit by Grado — Pesquisa de Satisfação","Ellit by Grado — Satisfaction Survey","Ellit by Grado — Encuesta de Satisfacción"),
      eventDate: todayISO(),
      brandColor:"#ff5a3c",
      logoDataURL:"",
      status:"draft",
      langDefault: lang,
      langsEnabled:["pt","en","es"],
      allowEditBeforeSubmit:true,
      webhook:"",
      responses:[],
      // controle de “já respondeu” por device
      answeredDevices: {}, // deviceHash -> responseId
      questions: [
        { id:"q1", kind:"nps", required:true,
          label:l(
            "1 - Em uma escala de 0 a 10, o quanto você recomendaria este evento a um amigo ou colega do mesmo nicho de mercado?",
            "1 - On a scale from 0 to 10, how likely are you to recommend this event to a friend or colleague in the same niche?",
            "1 - En una escala de 0 a 10, ¿qué tan probable es que recomiende este evento a un amigo o colega del mismo nicho?"
          ),
          help:l("0 = não recomendaria; 10 = recomendaria com certeza","0 = would not recommend; 10 = definitely recommend","0 = no recomendaría; 10 = definitivamente recomendaría"),
          visible:true
        },
        // 1–5 blocos
        { id:"q2", kind:"likert5", required:true, visible:true, label:l("2 - Organização geral do evento (1–5)","2 - Overall event organization (1–5)","2 - Organización general del evento (1–5)"), help:l("1 = muito ruim; 5 = excelente","1 = very poor; 5 = excellent","1 = muy malo; 5 = excelente") },
        { id:"q3", kind:"likert5", required:true, visible:true, label:l("3 - Qualidade do conteúdo (1–5)","3 - Content quality (1–5)","3 - Calidad del contenido (1–5)"), help:l("","", "") },
        { id:"q4", kind:"likert5", required:true, visible:true, label:l("4 - Qualidade das palestras (1–5)","4 - Quality of talks (1–5)","4 - Calidad de las charlas (1–5)") },
        { id:"q5", kind:"likert5", required:true, visible:true, label:l("5 - Relevância para sua área (1–5)","5 - Relevance to your field (1–5)","5 - Relevancia para su área (1–5)") },
        { id:"q6", kind:"likert5", required:true, visible:true, label:l("6 - Aplicabilidade prática (1–5)","6 - Practical applicability (1–5)","6 - Aplicabilidad práctica (1–5)") },
        { id:"q7", kind:"likert5", required:true, visible:true, label:l("7 - Oportunidades de networking (1–5)","7 - Networking opportunities (1–5)","7 - Oportunidades de networking (1–5)") },
        { id:"q8", kind:"likert5", required:true, visible:true, label:l("8 - Infraestrutura do local (1–5)","8 - Venue infrastructure (1–5)","8 - Infraestructura del lugar (1–5)") },
        { id:"q9", kind:"likert5", required:true, visible:true, label:l("9 - Pontualidade da programação (1–5)","9 - Program punctuality (1–5)","9 - Puntualidad de la programación (1–5)") },
        { id:"q10", kind:"likert5", required:false, visible:true, label:l("10 - Alimentação/coffee break (1–5)","10 - Food/coffee break (1–5)","10 - Alimentación/coffee break (1–5)") },
        { id:"q11", kind:"likert5", required:true, visible:true, label:l("11 - Experiência com expositores/estandes (1–5)","11 - Experience with exhibitors/booths (1–5)","11 - Experiencia con expositores/stands (1–5)") },

        // Sessões
        { id:"q12", kind:"multiselect", required:true, visible:true,
          label:l("12 - Quais as palestras/sessões você participou?","12 - Which talks/sessions did you attend?","12 - ¿A qué charlas/sesiones asistió?"),
          help:l("Selecione todas que se aplicam","Select all that apply","Seleccione todas las que apliquen"),
          options:[
            "Como está o mercado? -- com ABRAINC",
            "Oportunidades no cenário atual: Construir casas para vender e House Flipping -- André",
            "Estudo de Viabilidade: Exemplos reais de casas viáveis e não viáveis -- Israel",
            "Dinâmica: Cálculo de Resultados -- Israel e André",
            "Ciclo Estratégico para Incorporar Casas -- Israel e Gustavo",
            "Aplicação de Inteligência Financeira na Viabilidade -- André",
            "Estrutura Jurídica -- com Adriana e Ludmila",
            "HDI: Seguro garantia em operações de investimento - Carlos",
            "Sistema Construtivo ICF - João",
            "Alavancagem de Operações e Modelos de Parceria -- Israel",
            "Inter: Estratégia com financiamento -- Rodrigo",
            "Impactos da Nova Reforma Tributária -- com Thaís Cru",
            "⁠Captação de Investidores -- André",
            "Dinâmica prática: Seu pitch para investidores - Israel e Igor",
            "Apresentação de produtos para investidores -- Israel",
            "Painel Dinâmico: Terreno, Projeto, Obra, Gestão de Obra e Pós-venda",
            "Palestra Surpresa de Encerramento - Minotauro"
          ]
        },
        { id:"q13", kind:"radio", required:true, visible:true,
          label:l("13 - Qual foi a melhor palestra para você?","13 - What was the best talk for you?","13 - ¿Cuál fue la mejor charla para usted?"),
          optionsRef:"q12"
        },
        { id:"q14", kind:"text", required:true, visible:true, label:l("14 - Qual o melhor palestrante do evento?","14 - Who was the best speaker?","14 - ¿Quién fue el mejor ponente?") },
        { id:"q15", kind:"radio", required:true, visible:true, label:l("15 - Profundidade técnica/temática","15 - Technical/topic depth","15 - Profundidad técnica/temática"),
          options: [{pt:"Muito raso",en:"Too shallow",es:"Muy superficial"},{pt:"Adequado",en:"Adequate",es:"Adecuado"},{pt:"Excelente",en:"Excellent",es:"Excelente"}]
        },
        { id:"q16", kind:"radio", required:true, visible:true, label:l("16 - Ritmo das apresentações","16 - Presentation pace","16 - Ritmo de las presentaciones"),
          options: [{pt:"Lento",en:"Slow",es:"Lento"},{pt:"Adequado",en:"Adequate",es:"Adecuado"},{pt:"Rápido",en:"Fast",es:"Rápido"}]
        },
        { id:"q17", kind:"textarea", required:true, visible:true, label:l("17 - Temas que gostaria de ver nas próximas edições","17 - Topics you'd like to see in next editions","17 - Temas que le gustaría ver en próximas ediciones") },

        // Logística 18–25
        { id:"q18", kind:"likert5", required:true, visible:true, label:l("18 - Logística e comunicação (1–5)","18 - Logistics & communication (1–5)","18 - Logística y comunicación (1–5)") },
        { id:"q19", kind:"likert5", required:true, visible:true, label:l("19 - Processo de inscrição (1–5)","19 - Registration process (1–5)","19 - Proceso de inscripción (1–5)") },
        { id:"q20", kind:"likert5", required:true, visible:true, label:l("20 - Comunicação pré‑evento (1–5)","20 - Pre‑event communication (1–5)","20 - Comunicación previa al evento (1–5)") },
        { id:"q21", kind:"likert5", required:true, visible:true, label:l("21 - Credenciamento/entrada (1–5)","21 - Check‑in/entry (1–5)","21 - Acreditación/entrada (1–5)") },
        { id:"q22", kind:"likert5", required:true, visible:true, label:l("22 - Sinalização no local (1–5)","22 - On‑site signage (1–5)","22 - Señalización en el lugar (1–5)") },
        { id:"q23", kind:"likert5", required:true, visible:true, label:l("23 - Conforto das salas (1–5)","23 - Room comfort (1–5)","23 - Comodidad de salas (1–5)") },
        { id:"q24", kind:"likert5", required:true, visible:true, label:l("24 - Acessibilidade (1–5)","24 - Accessibility (1–5)","24 - Accesibilidad (1–5)") },
        { id:"q25", kind:"likert5", required:false, visible:true, label:l("25 - Wi‑Fi e conectividade (1–5)","25 - Wi‑Fi & connectivity (1–5)","25 - Wi‑Fi y conectividad (1–5)") },

        { id:"q26", kind:"textarea", required:false, visible:true, label:l("26 - Comentários sobre a logística","26 - Comments about logistics","26 - Comentarios sobre la logística") },

        { id:"q27", kind:"radio", required:true, visible:true, label:l("27 - O evento atendeu suas expectativas?","27 - Did the event meet your expectations?","27 - ¿El evento cumplió sus expectativas?"),
          options:[{pt:"Abaixo",en:"Below",es:"Por debajo"},{pt:"Dentro",en:"Met",es:"Dentro"},{pt:"Acima",en:"Above",es:"Por encima"}]
        },
        { id:"q28", kind:"radio", required:true, visible:true, label:l("28 - Custo‑benefício percebido","28 - Value for money","28 - Relación costo‑beneficio"),
          options:[{pt:"Muito baixo",en:"Very low",es:"Muy bajo"},{pt:"Baixo",en:"Low",es:"Bajo"},{pt:"Adequado",en:"Adequate",es:"Adecuado"},{pt:"Alto",en:"High",es:"Alto"},{pt:"Muito alto",en:"Very high",es:"Muy alto"}]
        },
        { id:"q29", kind:"radio", required:true, visible:true, label:l("29 - Participaria novamente deste evento?","29 - Would you attend again?","29 - ¿Participaría nuevamente?"),
          options:[{pt:"Sim",en:"Yes",es:"Sí"},{pt:"Não",en:"No",es:"No"},{pt:"Talvez",en:"Maybe",es:"Quizá"}]
        },
        { id:"q30", kind:"radio", required:true, visible:true, label:l("30 - Participaria de uma versão online/híbrida?","30 - Would you attend an online/hybrid version?","30 - ¿Participaría en una versión online/híbrida?"),
          options:[{pt:"Sim",en:"Yes",es:"Sí"},{pt:"Não",en:"No",es:"No"},{pt:"Talvez",en:"Maybe",es:"Quizá"}]
        },
        { id:"q31", kind:"radio", required:true, visible:true, label:l("31 - Recomendaria a um colega?","31 - Recommend a teammate?","31 - ¿Recomendaría a un colega?"),
          options:[{pt:"Sim",en:"Yes",es:"Sí"},{pt:"Não",en:"No",es:"No"},{pt:"Talvez",en:"Maybe",es:"Quizá"}]
        },

        { id:"q32", kind:"textarea", required:true, visible:true, label:l("32 - O que você mais gostou no evento?","32 - What did you like most?","32 - ¿Qué le gustó más?") },
        { id:"q33", kind:"textarea", required:true, visible:true, label:l("33 - O que você menos gostou no evento?","33 - What did you like least?","33 - ¿Qué le gustó menos?") },
        { id:"q34", kind:"textarea", required:true, visible:true, label:l("34 - Se pudesse mudar algo para a próxima edição, o que seria?","34 - If you could change something, what would it be?","34 - Si pudiera cambiar algo, ¿qué sería?") },

        { id:"q35", kind:"text", required:true, visible:true, label:l("35 - Seu cargo/função","35 - Your role/function","35 - Su cargo/función") },
        { id:"q36", kind:"select", required:true, visible:true, label:l("36 - Tamanho da empresa (funcionários)","36 - Company size (employees)","36 - Tamaño de la empresa (empleados)"),
          options:[{pt:"MEI",en:"Sole proprietor",es:"Autónomo"},"1 - 10","11 - 20","21 - 50","51 - 100","100 +"] },
        { id:"q37", kind:"select", required:true, visible:true, label:l("37 - Tempo de experiência (anos)","37 - Experience (years)","37 - Experiencia (años)"),
          options:["Menos de 1","1 - 2","2 - 5","6 - 10","10 - 15","Mais de 15"] },
        { id:"q38", kind:"select", required:true, visible:true, label:l("38 - Faixa etária","38 - Age range","38 - Rango de edad"),
          options:["< 18","18 - 24","25 - 34","35 - 44","45 - 54","55 +"] },
        { id:"q39", kind:"select", required:true, visible:true, label:l("39 - Como ficou sabendo do evento?","39 - How did you hear about the event?","39 - ¿Cómo se enteró del evento?"),
          options:[{pt:"E‑mail",en:"Email",es:"Email"},{pt:"Redes Sociais",en:"Social Media",es:"Redes Sociales"},{pt:"Indicação",en:"Referral",es:"Recomendación"},
                   {pt:"Site",en:"Website",es:"Sitio web"},{pt:"Anúncios",en:"Ads",es:"Anuncios"},{pt:"Comunidade/Associação",en:"Community/Association",es:"Comunidad/Asociación"},{pt:"Outro",en:"Other",es:"Otro"}] },
        { id:"q40", kind:"select", required:true, visible:true, label:l("40 - Objetivo principal ao participar","40 - Main objective in attending","40 - Objetivo principal al participar"),
          options:[{pt:"Conteúdo",en:"Content",es:"Contenido"},{pt:"Networking",en:"Networking",es:"Networking"},{pt:"Negócios",en:"Business",es:"Negocios"},
                   {pt:"Certificação",en:"Certification",es:"Certificación"},{pt:"Recrutamento",en:"Recruitment",es:"Reclutamiento"},{pt:"Outro",en:"Other",es:"Otro"}] },
        { id:"q41", kind:"radio", required:true, visible:true, label:l("41 - Podemos entrar em contato?","41 - May we contact you?","41 - ¿Podemos contactarlo?"),
          options:[{pt:"Sim",en:"Yes",es:"Sí"},{pt:"Não",en:"No",es:"No"}] },
        { id:"q42", kind:"radio", required:true, visible:true, label:l("42 - Autoriza uso de depoimento/imagem?","42 - Do you authorize using testimonial/image?","42 - ¿Autoriza uso de testimonio/imagen?"),
          options:[{pt:"Sim",en:"Yes",es:"Sí"},{pt:"Não",en:"No",es:"No"}] },

        { id:"q43", kind:"group", required:false, visible:true, label:l("Contato (opcional)","Contact (optional)","Contacto (opcional)"),
          children:[
            { id:"q43_name", kind:"text", required:false, label:l("Nome","Name","Nombre") },
            { id:"q43_email", kind:"text", required:false, label:l("E‑mail","Email","Email") },
            { id:"q43_phone", kind:"text", required:false, label:l("Telefone/WhatsApp","Phone/WhatsApp","Teléfono/WhatsApp") },
            { id:"q43_company", kind:"text", required:false, label:l("Empresa","Company","Empresa") }
          ]
        }
      ],
      custom:[]
    };
  }

  // Topbar nav/lang
  function renderTopbar(currentSurvey=null){
    qs("#nav-admin").textContent = t("admin");
    qs("#lang-pt").onclick = ()=>{ state.ui.lang="pt"; saveState(); render(); };
    qs("#lang-en").onclick = ()=>{ state.ui.lang="en"; saveState(); render(); };
    qs("#lang-es").onclick = ()=>{ state.ui.lang="es"; saveState(); render(); };
    document.documentElement.style.setProperty("--brand", currentSurvey?.brandColor || "#ff5a3c");
    const logo = qs("#brandLogo");
    if(currentSurvey?.logoDataURL){ logo.src=currentSurvey.logoDataURL; logo.style.display=""; } else { logo.style.display="none"; }
    const title = qs("#brandTitle");
    const badge = qs("#surveyBadge");
    if(currentSurvey){
      title.textContent = currentSurvey.title[state.ui.lang] || currentSurvey.title.pt;
      badge.textContent = t(currentSurvey.status);
      badge.className = "status " + currentSurvey.status;
      badge.style.display = "";
    } else {
      title.textContent = "NPS Eventos"; badge.style.display = "none";
    }
  }

  // Render app
  function render(){
    ensureState();
    const root = qs("#app");
    const {path, params} = route();

    if(path==="/admin"){ renderAdmin(root); return; }
    if(path.startsWith("/s/")){ const sid=path.split("/")[2]; const s=state.surveys[sid]; renderQuiz(root, s, params); return; }
    if(path.startsWith("/report/")){ const sid=path.split("/")[2]; const s=state.surveys[sid]; renderReport(root, s); return; }

    renderTopbar(null);
    root.innerHTML = `<div class="card"><h2>Bem-vindo</h2><p class="muted">Acesse o Admin para criar e ativar uma pesquisa. Depois, use o link público único para os participantes responderem no formato de quiz.</p></div>`;
  }

  // ============== Admin ==============
  function adminLogged(){ return !!state.admin.passHash && sessionStorage.getItem("admin_ok")==="1"; }

  function renderAdmin(root){
    renderTopbar(null);
    root.innerHTML="";
    const wrap=document.createElement("div");
    wrap.className="grid";
    root.appendChild(wrap);

    if(!adminLogged()){
      const card=document.createElement("div"); card.className="card";
      card.innerHTML = `
        <h2>${t("loginTitle")}</h2>
        <p class="muted">${state.admin.passHash?"":t("setPassword")}</p>
        <div class="row">
          <input type="password" id="adm-pass" placeholder="${t("password")}" />
          <button class="btn primary" id="adm-login">${t("signIn")}</button>
        </div>
      `;
      wrap.appendChild(card);
      qs("#adm-login").onclick = async ()=>{
        const pass = qs("#adm-pass").value;
        const hash = await sha256(pass);
        if(!state.admin.passHash){ state.admin.passHash=hash; saveState(); sessionStorage.setItem("admin_ok","1"); render(); }
        else if(hash===state.admin.passHash){ sessionStorage.setItem("admin_ok","1"); render(); }
        else alert("Senha incorreta.");
      };
      return;
    }

    const toolbar=document.createElement("div"); toolbar.className="row card";
    toolbar.innerHTML = `
      <strong>${t("surveys")}</strong>
      <button class="btn primary" id="new">${t("newSurvey")}</button>
      <span class="spacer"></span>
      <button class="btn ghost" id="out">${t("signOut")}</button>
    `;
    wrap.appendChild(toolbar);
    qs("#out").onclick = ()=>{ sessionStorage.removeItem("admin_ok"); render(); };
    qs("#new").onclick = ()=>{ const s=defaultSurvey(state.ui.lang); state.surveys[s.id]=s; saveState(); render(); };

    const list=document.createElement("div"); list.className="card";
    const items=Object.values(state.surveys).sort((a,b)=>(b.eventDate||"").localeCompare(a.eventDate||""));
    list.innerHTML = `
      <table class="table"><thead><tr><th>${t("title")}</th><th>${t("eventDate")}</th><th>${t("status")}</th><th>${t("responses")}</th><th></th></tr></thead>
      <tbody>${items.map(s=>`
        <tr>
          <td>${s.title[state.ui.lang]||s.title.pt}</td>
          <td>${s.eventDate}</td>
          <td><span class="status ${s.status}">${t(s.status)}</span></td>
          <td>${s.responses.length}</td>
          <td class="row">
            <a class="btn small" href="#/admin?edit=${s.id}">${t("edit")}</a>
            <a class="btn small" href="#/report/${s.id}">${t("report")}</a>
            <a class="btn small" href="#/s/${s.id}">${t("open")}</a>
            <button class="btn small" data-dup="${s.id}">${t("duplicate")}</button>
            <button class="btn small bad" data-del="${s.id}">${t("delete")}</button>
          </td>
        </tr>`).join("")}</tbody></table>
    `;
    wrap.appendChild(list);
    qsa("[data-del]").forEach(b=> b.onclick=()=>{ const id=b.getAttribute("data-del"); if(confirm("Excluir esta pesquisa?")){ delete state.surveys[id]; saveState(); render(); } });
    qsa("[data-dup]").forEach(b=> b.onclick=()=>{ const id=b.getAttribute("data-dup"); const s=JSON.parse(JSON.stringify(state.surveys[id])); s.id=uid("srv_"); s.responses=[]; s.answeredDevices={}; state.surveys[s.id]=s; saveState(); render(); });

    // Edit panel
    const {params}=route();
    const s = params.edit ? state.surveys[params.edit] : null;
    if(!s) return;

    const panel=document.createElement("div"); panel.className="grid"; wrap.appendChild(panel);

    panel.innerHTML = `
      <div class="card">
        <h3>${t("settings")}</h3>
        <div class="row">
          <div style="flex:1; min-width:260px">
            <label>${t("title")} (PT)</label><input id="ttl-pt" type="text" value="${s.title.pt||""}">
            <label>${t("title")} (EN)</label><input id="ttl-en" type="text" value="${s.title.en||""}">
            <label>${t("title")} (ES)</label><input id="ttl-es" type="text" value="${s.title.es||""}">
            <label>${t("eventDate")}</label><input id="evt" type="date" value="${s.eventDate||""}">
            <label>${t("language")}</label>
            <select id="lang-def">
              ${["pt","en","es"].map(v=>`<option ${s.langDefault===v?"selected":""} value="${v}">${v.toUpperCase()}</option>`).join("")}
            </select>
            <label>${t("languagesEnabled")}</label>
            <div class="row">${["pt","en","es"].map(v=>`<label class="chip"><input type="checkbox" value="${v}" ${s.langsEnabled.includes(v)?"checked":""}> ${v.toUpperCase()}</label>`).join("")}</div>
          </div>
          <div style="flex:1; min-width:260px">
            <label>${t("brandColor")}</label><input id="brand" type="color" value="${s.brandColor}">
            <label>${t("logo")} </label><input id="logo" type="file" accept=".png,.svg,.jpg,.jpeg,.webp">
            <div class="row" style="margin-top:6px"><img id="logoPrev" src="${s.logoDataURL||""}" style="max-height:48px;max-width:180px; background:#fff; border-radius:8px; ${s.logoDataURL?"":"display:none"}"><button class="btn small" id="logoClear">Remover logo</button></div>
            <label>${t("status")}</label>
            <div class="row">
              ${["draft","active","closed"].map(st=>`<label class="chip"><input type="radio" name="status" value="${st}" ${s.status===st?"checked":""}> ${t(st)}</label>`).join("")}
            </div>
          </div>
        </div>
        <div class="row" style="margin-top:8px">
          <button class="btn primary" id="save">${t("save")}</button><span class="muted" id="savemsg"></span>
          <span class="spacer"></span>
          <a class="btn" href="#/s/${s.id}">${t("open")}</a>
        </div>
        <p class="notice" style="margin-top:8px">${t("oneLinkNote")}</p>
        <div class="row">
          <div class="muted" style="overflow-wrap:anywhere">${location.origin}${location.pathname}#/s/${s.id}?lang=${s.langDefault}</div>
        </div>
      </div>

      <div class="card">
        <h3>${t("editBase")}</h3>
        <div id="base-list"></div>
      </div>

      <div class="card">
        <h3>${t("customQuestions")}</h3>
        <div class="row">
          <button class="btn small" id="add-text">${t("addQuestion")} (texto)</button>
          <button class="btn small" id="add-area">${t("addQuestion")} (parágrafo)</button>
          <button class="btn small" id="add-like">${t("addQuestion")} (escala 1–5)</button>
          <button class="btn small" id="add-radio">${t("addQuestion")} (múltipla única)</button>
          <button class="btn small" id="add-mult">${t("addQuestion")} (múltipla escolha)</button>
          <button class="btn small" id="add-select">${t("addQuestion")} (select)</button>
        </div>
        <div id="custom-list" style="margin-top:10px"></div>
      </div>

      <div class="card">
        <h3>Integrações</h3>
        <label>${t("webhook")}</label>
        <input id="wh" type="url" placeholder="https://script.google.com/macros/s/.../exec" value="${s.webhook||""}">
        <div class="row" style="margin-top:8px">
          <button class="btn" id="csv">${t("exportCSV")}</button>
          <button class="btn" id="json">${t("exportJSON")}</button>
          <label class="btn">${t("importJSON")}<input id="json-in" type="file" accept=".json" style="display:none"></label>
          <button class="btn" id="print">${t("printPDF")}</button>
        </div>
      </div>
    `;

    function qLabel(q,lang){ return (q.label?.[lang] || q.label?.pt || "") }
    function qHelp(q,lang){ return (q.help?.[lang] || q.help?.pt || "") }

    function renderBaseList(){
      const box = panel.querySelector("#base-list");
      box.innerHTML = "";
      s.questions.forEach((q,idx)=>{
        const row = document.createElement("div"); row.className="card"; row.style.marginBottom="10px";
        row.innerHTML = `
          <div class="row">
            <strong>${q.id}</strong>
            <span class="chip">${t("type")}: ${q.kind}</span>
            <label class="chip"><input data-vis type="checkbox" ${q.visible!==false?"checked":""}> ${t("visible")}</label>
            <label class="chip"><input data-req type="checkbox" ${q.required?"checked":""}> ${t("required")}</label>
            <span class="spacer"></span>
            <button class="btn small" data-up>↑ ${t("up")}</button>
            <button class="btn small" data-down>↓ ${t("down")}</button>
          </div>
          <div class="row" style="margin-top:8px; gap:8px">
            <div style="flex:1; min-width:220px">
              <label>${t("labelPT")}</label><input data-lpt type="text" value="${qLabel(q,"pt")}">
              <label>${t("helpPT")}</label><input data-hpt type="text" value="${qHelp(q,"pt")}">
            </div>
            <div style="flex:1; min-width:220px">
              <label>${t("labelEN")}</label><input data-len type="text" value="${qLabel(q,"en")}">
              <label>${t("helpEN")}</label><input data-hen type="text" value="${qHelp(q,"en")}">
            </div>
            <div style="flex:1; min-width:220px">
              <label>${t("labelES")}</label><input data-les type="text" value="${qLabel(q,"es")}">
              <label>${t("helpES")}</label><input data-hes type="text" value="${qHelp(q,"es")}">
            </div>
          </div>
          ${["radio","select","multiselect"].includes(q.kind) ? `
          <div style="margin-top:8px">
            <label>Opções (1 por linha; PT|EN|ES). Se vazio e optionsRef definido, usa referência.</label>
            <textarea data-opts style="width:100%; min-height:90px">${(q.options||[]).map(opt=>{
              if(typeof opt==="string") return `${opt}|${opt}|${opt}`;
              return `${opt.pt||""}|${opt.en||opt.pt||""}|${opt.es||opt.pt||""}`;
            }).join("\n")}</textarea>
          </div>`:""}
        `;
        box.appendChild(row);
        row.querySelector("[data-vis]").onchange = e=>{ q.visible = e.target.checked; saveState(); };
        row.querySelector("[data-req]").onchange = e=>{ q.required = e.target.checked; saveState(); };
        row.querySelector("[data-up]").onclick = ()=>{ if(idx>0){ const tmp=s.questions[idx-1]; s.questions[idx-1]=s.questions[idx]; s.questions[idx]=tmp; saveState(); renderBaseList(); } };
        row.querySelector("[data-down]").onclick = ()=>{ if(idx<s.questions.length-1){ const tmp=s.questions[idx+1]; s.questions[idx+1]=s.questions[idx]; s.questions[idx]=tmp; saveState(); renderBaseList(); } };
        row.querySelector("[data-lpt]").oninput = e=>{ q.label=q.label||{}; q.label.pt=e.target.value; saveState(); };
        row.querySelector("[data-len]").oninput = e=>{ q.label=q.label||{}; q.label.en=e.target.value; saveState(); };
        row.querySelector("[data-les]").oninput = e=>{ q.label=q.label||{}; q.label.es=e.target.value; saveState(); };
        row.querySelector("[data-hpt]").oninput = e=>{ q.help=q.help||{}; q.help.pt=e.target.value; saveState(); };
        row.querySelector("[data-hen]").oninput = e=>{ q.help=q.help||{}; q.help.en=e.target.value; saveState(); };
        row.querySelector("[data-hes]").oninput = e=>{ q.help=q.help||{}; q.help.es=e.target.value; saveState(); };
        const ta=row.querySelector("[data-opts]"); if(ta){ ta.oninput = e=>{
          const lines = e.target.value.split("\n").map(x=>x.trim()).filter(Boolean);
          q.options = lines.map(line=>{ const [pt,en,es] = line.split("|"); if(!en||!es) return pt; return {pt,en,es}; });
          saveState();
        } }
      });
    }

    function renderCustom(){
      const box = panel.querySelector("#custom-list");
      box.innerHTML="";
      if(!s.custom.length){ box.innerHTML = `<div class="muted">Nenhuma pergunta personalizada.</div>`; return; }
      s.custom.forEach((q,idx)=>{
        const div=document.createElement("div"); div.className="card"; div.style.marginBottom="10px";
        div.innerHTML = `
          <div class="row">
            <strong>${q.id}</strong>
            <span class="chip">${t("type")}: ${q.kind}</span>
            <label class="chip"><input data-req type="checkbox" ${q.required?"checked":""}> ${t("required")}</label>
            <span class="spacer"></span>
            <button class="btn small" data-up>↑ ${t("up")}</button>
            <button class="btn small" data-down>↓ ${t("down")}</button>
            <button class="btn small bad" data-rm>${t("remove")}</button>
          </div>
          <div class="row" style="margin-top:8px; gap:8px">
            <div style="flex:1; min-width:220px">
              <label>${t("labelPT")}</label><input data-lpt type="text" value="${q.label?.pt||""}">
            </div>
            <div style="flex:1; min-width:220px">
              <label>${t("labelEN")}</label><input data-len type="text" value="${q.label?.en||""}">
            </div>
            <div style="flex:1; min-width:220px">
              <label>${t("labelES")}</label><input data-les type="text" value="${q.label?.es||""}">
            </div>
          </div>
          ${["radio","select","multiselect","likert5"].includes(q.kind)?`
            <div style="margin-top:8px">
              <label>Opções (1 por linha; PT|EN|ES)</label>
              <textarea data-opts style="width:100%; min-height:90px">${(q.options||[]).map(opt=>{
                if(typeof opt==="string") return `${opt}|${opt}|${opt}`;
                return `${opt.pt||""}|${opt.en||opt.pt||""}|${opt.es||opt.pt||""}`;
              }).join("\n")}</textarea>
            </div>`:""}
        `;
        box.appendChild(div);
        div.querySelector("[data-req]").onchange = e=>{ q.required=e.target.checked; saveState(); };
        div.querySelector("[data-up]").onclick = ()=>{ if(idx>0){ const t=s.custom[idx-1]; s.custom[idx-1]=s.custom[idx]; s.custom[idx]=t; saveState(); renderCustom(); } };
        div.querySelector("[data-down]").onclick = ()=>{ if(idx<s.custom.length-1){ const t=s.custom[idx+1]; s.custom[idx+1]=s.custom[idx]; s.custom[idx]=t; saveState(); renderCustom(); } };
        div.querySelector("[data-rm]").onclick = ()=>{ s.custom.splice(idx,1); saveState(); renderCustom(); };
        div.querySelector("[data-lpt]").oninput = e=>{ q.label=q.label||{}; q.label.pt=e.target.value; saveState(); };
        div.querySelector("[data-len]").oninput = e=>{ q.label=q.label||{}; q.label.en=e.target.value; saveState(); };
        div.querySelector("[data-les]").oninput = e=>{ q.label=q.label||{}; q.label.es=e.target.value; saveState(); };
        const ta=div.querySelector("[data-opts]"); if(ta){ ta.oninput = e=>{
          const lines = e.target.value.split("\n").map(x=>x.trim()).filter(Boolean);
          q.options = lines.map(line=>{ const [pt,en,es]=line.split("|"); if(!en||!es) return pt; return {pt,en,es}; });
          saveState();
        } }
      });
    }

    // Bind settings
    panel.querySelector("#save").onclick = ()=>{
      s.title.pt = panel.querySelector("#ttl-pt").value.trim();
      s.title.en = panel.querySelector("#ttl-en").value.trim();
      s.title.es = panel.querySelector("#ttl-es").value.trim();
      s.eventDate = panel.querySelector("#evt").value;
      s.langDefault = panel.querySelector("#lang-def").value;
      s.langsEnabled = qsa('input[type="checkbox"][value]', panel).filter(i=>i.checked).map(i=>i.value).filter(v=>["pt","en","es"].includes(v));
      s.brandColor = panel.querySelector("#brand").value||s.brandColor;
      s.webhook = panel.querySelector("#wh").value.trim();
      s.status = panel.querySelector('input[name="status"]:checked')?.value || s.status;
      saveState(); panel.querySelector("#savemsg").textContent=t("saved"); setTimeout(()=>panel.querySelector("#savemsg").textContent="",1500); renderTopbar(s);
    };
    panel.querySelector("#logo").onchange = e=>{
      const f=e.target.files?.[0]; if(!f) return;
      const r=new FileReader(); r.onload=()=>{ s.logoDataURL=r.result; saveState(); panel.querySelector("#logoPrev").src=s.logoDataURL; panel.querySelector("#logoPrev").style.display=""; renderTopbar(s); };
      r.readAsDataURL(f);
    };
    panel.querySelector("#logoClear").onclick = ()=>{ s.logoDataURL=""; saveState(); panel.querySelector("#logoPrev").style.display="none"; renderTopbar(s); };

    // Export/Import
    panel.querySelector("#csv").onclick = ()=>{ const csv = exportCSV(s); downloadBlob(csv, (s.title.pt||"pesquisa")+"_respostas.csv", "text/csv;charset=utf-8"); };
    panel.querySelector("#json").onclick = ()=>{ const json = JSON.stringify(s,null,2); downloadBlob(json, (s.title.pt||"pesquisa")+".json", "application/json"); };
    panel.querySelector("#json-in").onchange = e=>{
      const f=e.target.files?.[0]; if(!f) return; const r=new FileReader(); r.onload=()=>{
        try{ const obj=JSON.parse(r.result); if(obj.id && obj.questions){ state.surveys[obj.id]=obj; saveState(); alert("Importado."); render(); } else alert("JSON inválido."); }
        catch{ alert("Erro ao ler JSON."); }
      }; r.readAsText(f);
    };
    panel.querySelector("#print").onclick = ()=>{ location.hash = `#/report/${s.id}`; setTimeout(()=>window.print(), 300); };

    // Buttons add custom
    panel.querySelector("#add-text").onclick = ()=>{ s.custom.push({id:uid("c_"), kind:"text", required:false, label:{pt:"Nova pergunta (texto)",en:"New question (text)",es:"Nueva pregunta (texto)"}}); saveState(); renderCustom(); };
    panel.querySelector("#add-area").onclick = ()=>{ s.custom.push({id:uid("c_"), kind:"textarea", required:false, label:{pt:"Nova pergunta (parágrafo)",en:"New question (paragraph)",es:"Nueva pregunta (párrafo)"}}); saveState(); renderCustom(); };
    panel.querySelector("#add-like").onclick = ()=>{ s.custom.push({id:uid("c_"), kind:"likert5", required:false, label:{pt:"Nova escala 1–5",en:"New 1–5 scale",es:"Nueva escala 1–5"}, options:["1","2","3","4","5"]}); saveState(); renderCustom(); };
    panel.querySelector("#add-radio").onclick = ()=>{ s.custom.push({id:uid("c_"), kind:"radio", required:false, label:{pt:"Nova múltipla única",en:"New single choice",es:"Nueva opción única"}, options:[{pt:"Opção A",en:"Option A",es:"Opción A"},{pt:"Opção B",en:"Option B",es:"Opción B"}]}); saveState(); renderCustom(); };
    panel.querySelector("#add-mult").onclick = ()=>{ s.custom.push({id:uid("c_"), kind:"multiselect", required:false, label:{pt:"Nova múltipla escolha",en:"New multiple choice",es:"Nueva múltiple elección"}, options:[{pt:"Opção 1",en:"Option 1",es:"Opción 1"},{pt:"Opção 2",en:"Option 2",es:"Opción 2"}]}); saveState(); renderCustom(); };
    panel.querySelector("#add-select").onclick = ()=>{ s.custom.push({id:uid("c_"), kind:"select", required:false, label:{pt:"Novo select",en:"New select",es:"Nuevo select"}, options:[{pt:"A",en:"A",es:"A"},{pt:"B",en:"B",es:"B"}]}); saveState(); renderCustom(); };

    renderBaseList();
    renderCustom();
    renderTopbar(s);
  }

  function downloadBlob(content, filename, type){
    const blob = new Blob([content], {type});
    const a=document.createElement("a"); a.href=URL.createObjectURL(blob); a.download=filename; a.click();
    setTimeout(()=>URL.revokeObjectURL(a.href),1000);
  }

  function exportCSV(survey){
    const header = ["responseId","timestamp","lang","device"];
    const qids = [];
    survey.questions.forEach(q=>{
      if(q.kind==="group"){ q.children.forEach(c=> qids.push(c.id)); }
      else qids.push(q.id);
    });
    survey.custom.forEach(q=> qids.push(q.id));
    const all = header.concat(qids);
    const rows = [all];
    survey.responses.forEach(r=>{
      const row = [r.id, r.at, r.lang, r.device];
      qids.forEach(id=>{
        let v = r.answers[id];
        if(Array.isArray(v)) v = v.join(" | ");
        row.push(v ?? "");
      });
      rows.push(row);
    });
    return rows.map(r=> r.map(c=> `"${(c??"").toString().replace(/"/g,'""')}"`).join(",")).join("\n");
  }

  // ============== Quiz (público) ==============
  function renderQuiz(root, survey, params){
    if(!survey || survey.status!=="active"){ renderTopbar(null); root.innerHTML = `<div class="card bad">${t("invalidLink")}</div>`; return; }
    const langParam = params.lang;
    const lang = (langParam && survey.langsEnabled.includes(langParam)) ? langParam : survey.langDefault;
    state.ui.lang = lang; saveState();
    renderTopbar(survey);

    // Checagem “já respondeu” por device
    const dev = deviceHashSync();
    const cookieKey = `nps_${survey.id}_answered`;
    const alreadyLS = localStorage.getItem(cookieKey)==="1";
    const alreadyMap = !!survey.answeredDevices?.[dev];
    const already = alreadyLS || alreadyMap || document.cookie.includes(`${cookieKey}=1`);
    if(already){
      root.innerHTML = `<div class="card"><h2>${survey.title[lang]||survey.title.pt}</h2><p class="muted">${t("alreadyAnswered")}</p></div>`;
      return;
    }

    // Preparar lista de perguntas visíveis
    const allQuestions = [
      ...survey.questions.filter(q=>q.visible!==false),
      ...survey.custom
    ];

    // Build quiz UI
    root.innerHTML="";
    const wrap=document.createElement("div"); wrap.className="quiz-wrap"; root.appendChild(wrap);

    const head=document.createElement("div"); head.className="card";
    head.innerHTML = `
      <h2 style="margin-bottom:.2rem">${survey.title[lang]||survey.title.pt}</h2>
      <div class="progress"><span id="prog" style="width:0%"></span></div>
      <div class="muted">${I18N[lang].scaleHelp_0_10}</div>
    `;
    wrap.appendChild(head);

    const form=document.createElement("form"); form.className="card"; wrap.appendChild(form);

    function qLabel(q){ return (q.label?.[lang] || q.label?.pt || "") }
    function qHelp(q){ return (q.help?.[lang] || q.help?.pt || "") }
    function qOptions(q){
      if(q.optionsRef){
        const ref = survey.questions.find(x=>x.id===q.optionsRef);
        if(ref){ return normalizeOptions(ref.options); }
      }
      return normalizeOptions(q.options);
    }
    function normalizeOptions(opts){
      if(!opts) return [];
      return opts.map(o=> typeof o==="string" ? o : (o[lang]||o.pt||""));
    }

    // Render step for a question
    const steps=[];
    allQuestions.forEach((q,i)=>{
      const step = document.createElement("div"); step.className="qstep"; step.dataset.qid=q.id;
      let inner = `<h3>${qLabel(q)}</h3>${qHelp(q)?`<p class="muted">${qHelp(q)}</p>`:""}`;
      if(q.kind==="nps"){
        inner += `<div class="scale" role="radiogroup" aria-label="NPS 0-10">${Array.from({length:11},(_,n)=>`<button type="button" class="pill" data-v="${n}" role="radio" aria-checked="false">${n}</button>`).join("")}</div>`;
      } else if(q.kind==="likert5"){
        inner += `<div class="scale" role="radiogroup" aria-label="Scale 1-5">${[1,2,3,4,5].map(n=>`<button type="button" class="pill" data-v="${n}" role="radio" aria-checked="false">${n}</button>`).join("")}</div>`;
        inner += `<p class="muted">${I18N[lang].scaleHelp_1_5}</p>`;
      } else if(q.kind==="radio"){
        inner += `<div class="options">${qOptions(q).map((opt,idx)=>`<label class="chip"><input type="radio" name="${q.id}" value="${opt}"> ${opt}</label>`).join("")}</div>`;
      } else if(q.kind==="multiselect"){
        inner += `<div class="chips">${qOptions(q).map((opt,idx)=>`<label class="chip"><input type="checkbox" value="${opt}"> ${opt}</label>`).join("")}</div>`;
      } else if(q.kind==="select"){
        inner += `<div><select id="${q.id}">${qOptions(q).map(opt=>`<option value="${opt}">${opt}</option>`).join("")}</select></div>`;
      } else if(q.kind==="text"){
        inner += `<div><input type="text" id="${q.id}" placeholder=""></div>`;
      } else if(q.kind==="textarea"){
        inner += `<div><textarea id="${q.id}" placeholder=""></textarea></div>`;
      } else if(q.kind==="group"){
        inner += q.children.map(c=>`
          <div>
            <label class="muted" style="display:block; margin:.2rem 0">${c.label?.[lang]||c.label?.pt||""}</label>
            ${c.kind==="text"?`<input type="text" id="${c.id}">`:
               c.kind==="textarea"?`<textarea id="${c.id}"></textarea>`:
               c.kind==="select"?`<select id="${c.id}">${normalizeOptions(c.options||[]).map(o=>`<option>${o}</option>`).join("")}</select>`:""}
          </div>
        `).join("");
      }
      step.innerHTML = inner;
      // attach toggle for scale buttons
      const scale = step.querySelector(".scale");
      if(scale){
        scale.addEventListener("click", (ev)=>{
          const btn = ev.target.closest(".pill"); if(!btn) return;
          qsa(".pill", scale).forEach(b=>b.setAttribute("aria-checked","false"));
          btn.setAttribute("aria-checked","true");
          step.dataset.value = btn.getAttribute("data-v");
        });
      }
      steps.push(step);
      form.appendChild(step);
    });

    // Controls
    const nav=document.createElement("div"); nav.className="row"; nav.style.marginTop="12px";
    nav.innerHTML = `
      <button class="btn" type="button" id="prev">${t("prev")}</button>
      <span class="spacer"></span>
      <button class="btn" type="button" id="review">${t("review")}</button>
      <button class="btn primary" type="button" id="next">${t("next")}</button>
      <button class="btn ok" type="submit" id="submit" style="display:none">${t("submit")}</button>
    `;
    form.appendChild(nav);

    let idx=0;
    function updateProgress(){ const pct = Math.round(((idx)/steps.length)*100); qs("#prog").style.width = Math.max(5, pct)+"%"; }
    function showStep(i){
      steps.forEach((s,j)=> s.classList.toggle("active", j===i));
      idx = i;
      updateProgress();
      qs("#prev").disabled = (idx===0);
      const last = idx===steps.length-1;
      qs("#next").style.display = last ? "none":"inline-block";
      qs("#review").style.display = last ? "inline-block":"none";
      qs("#submit").style.display = last ? "inline-block":"none";
    }
    function validateStep(i){
      const step = steps[i]; const qid = step.dataset.qid;
      const q = allQuestions.find(x=>x.id===qid);
      if(!q || q.required!==true) return true;
      if(q.kind==="nps" || q.kind==="likert5"){ return !!step.dataset.value; }
      if(q.kind==="radio"){ return !!step.querySelector('input[type="radio"]:checked'); }
      if(q.kind==="multiselect"){ return step.querySelectorAll('input[type="checkbox"]:checked').length>0; }
      if(q.kind==="select"){ return !!step.querySelector("select").value; }
      if(q.kind==="text"){ return !!step.querySelector("input").value.trim(); }
      if(q.kind==="textarea"){ return !!step.querySelector("textarea").value.trim(); }
      if(q.kind==="group"){
        let ok=true; (q.children||[]).forEach(c=>{
          if(c.required){
            const el = step.querySelector("#"+c.id);
            const v = (el?.value||"").trim(); if(!v) ok=false;
          }
        });
        return ok;
      }
      return true;
    }

    function collectAll(){
      const ans = {};
      allQuestions.forEach(q=>{
        const step = form.querySelector(`.qstep[data-qid="${q.id}"]`);
        if(!step) return;
        if(q.kind==="nps" || q.kind==="likert5"){ ans[q.id] = step.dataset.value? Number(step.dataset.value):null; }
        else if(q.kind==="radio"){ ans[q.id] = step.querySelector('input[type="radio"]:checked')?.value || null; }
        else if(q.kind==="multiselect"){ ans[q.id] = [...step.querySelectorAll('input[type="checkbox"]:checked')].map(x=>x.value); }
        else if(q.kind==="select"){ ans[q.id] = step.querySelector("select")?.value || null; }
        else if(q.kind==="text"){ ans[q.id] = step.querySelector("input")?.value.trim() || ""; }
        else if(q.kind==="textarea"){ ans[q.id] = step.querySelector("textarea")?.value.trim() || ""; }
        else if(q.kind==="group"){ (q.children||[]).forEach(c=>{ const el=step.querySelector("#"+c.id); ans[c.id] = (el?.value||"").trim(); }); }
      });
      return ans;
    }

    function showReviewDialog(){
      const ans = collectAll();
      // valida tudo
      for(let i=0;i<steps.length;i++){ if(!validateStep(i)){ alert(t("requiredMsg")); showStep(i); return; } }
      const dlg=document.createElement("div"); dlg.className="card"; dlg.style.borderColor="var(--brand)";
      dlg.innerHTML = `<h3>${t("review")}</h3><div id="rev"></div><div class="row" style="margin-top:10px"><span class="spacer"></span><button class="btn" id="close">${t("edit")}</button><button class="btn primary" id="confirm">${t("submit")}</button></div>`;
      wrap.appendChild(dlg);
      const rev=dlg.querySelector("#rev");
      allQuestions.forEach(q=>{
        if(q.kind==="group"){
          const groupDiv=document.createElement("div"); groupDiv.innerHTML=`<strong>${qLabel(q)}</strong>`; rev.appendChild(groupDiv);
          (q.children||[]).forEach(c=>{
            const v=ans[c.id] ?? "";
            const row=document.createElement("div"); row.className="row"; row.innerHTML=`<div class="muted" style="min-width:240px">— ${c.label?.[lang]||c.label?.pt||""}</div><div>${Array.isArray(v)?v.join(", "):v}</div>`;
            rev.appendChild(row);
          });
        } else {
          const v=ans[q.id];
          const row=document.createElement("div"); row.className="row"; row.innerHTML=`<div class="muted" style="min-width:240px">${qLabel(q)}</div><div>${Array.isArray(v)?v.join(", "):v}</div>`;
          rev.appendChild(row);
        }
      });
      dlg.querySelector("#close").onclick = ()=> dlg.remove();
      dlg.querySelector("#confirm").onclick = ()=> doSubmit(ans, dev, survey, lang);
    }

    qs("#prev").onclick = ()=>{ if(idx>0) showStep(idx-1); };
    qs("#next").onclick = ()=>{ if(!validateStep(idx)){ alert(t("requiredMsg")); return; } if(idx<steps.length-1) showStep(idx+1); };
    qs("#review").onclick = showReviewDialog;
    form.onsubmit = (e)=>{ e.preventDefault(); showReviewDialog(); };

    showStep(0);
  }

  async function doSubmit(ans, deviceHash, survey, lang){
    // registrar
    const rec = { id: uid("r_"), at: new Date().toISOString(), lang, device: deviceHash, answers: ans };
    survey.responses.push(rec);
    survey.answeredDevices = survey.answeredDevices || {};
    survey.answeredDevices[deviceHash] = rec.id;
    saveState();
    // marca cookie + LS
    const cookieKey = `nps_${survey.id}_answered`;
    document.cookie = `${cookieKey}=1; max-age=${60*60*24*365}; path=/`;
    localStorage.setItem(cookieKey, "1");

    // webhook opcional
    if(survey.webhook){
      try{
        await fetch(survey.webhook, { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify({ surveyId: survey.id, title: survey.title, eventDate: survey.eventDate, lang, device: deviceHash, response: rec }) });
      }catch(e){ console.warn("Webhook fail", e); }
    }

    alert(I18N[lang].submitted || t("submitted"));
    location.reload();
  }

  // ============== Report ==============
  function renderReport(root, survey){
    if(!survey){ renderTopbar(null); root.innerHTML = `<div class="card bad">${t("invalidLink")}</div>`; return; }
    renderTopbar(survey);
    root.innerHTML="";
    const card=document.createElement("div"); card.className="grid"; root.appendChild(card);

    const head=document.createElement("div"); head.className="card";
    head.innerHTML = `
      <div class="row">
        <div>
          <h2>${survey.title[state.ui.lang]||survey.title.pt}</h2>
          <div class="muted">${survey.eventDate||""}</div>
        </div>
        <div class="spacer"></div>
        <button class="btn" onclick="window.print()">${t("printPDF")}</button>
      </div>
    `;
    card.appendChild(head);

    // NPS
    const npsVals = survey.responses.map(r=> Number(r.answers?.q1)).filter(x=>!isNaN(x));
    const {nps, counts, total} = calcNPS(npsVals);
    const npsCard=document.createElement("div"); npsCard.className="card";
    npsCard.innerHTML = `
      <h3>${t("nps")}</h3>
      <div class="row">
        <div style="font-size:2.4rem; font-weight:800">${isFinite(nps)?Math.round(nps):"—"}</div>
        <div class="muted">${total} respostas</div>
      </div>
      <div class="row" style="gap:20px; margin-top:8px">
        <div><div class="muted">${t("promoters")}</div><div class="progress" style="width:200px"><span style="width:${pct(counts.pro,total)}%"></span></div></div>
        <div><div class="muted">${t("detractors")}</div><div class="progress" style="width:200px"><span style="width:${pct(counts.det,total)}%"></span></div></div>
      </div>
    `;
    card.appendChild(npsCard);

    // Médias 1–5
    const dims=["q2","q3","q4","q5","q6","q7","q8","q9","q10","q11","q18","q19","q20","q21","q22","q23","q24","q25"];
    const tbl=document.createElement("table"); tbl.className="table";
    tbl.innerHTML = `<thead><tr><th>${t("title")}</th><th>${t("avg")}</th></tr></thead><tbody></tbody>`;
    const tb=tbl.querySelector("tbody");
    dims.forEach(id=>{
      const q = survey.questions.find(x=>x.id===id);
      if(!q) return;
      const vals = survey.responses.map(r=> Number(r.answers?.[id])).filter(x=>!isNaN(x));
      const avg = vals.length? (vals.reduce((a,b)=>a+b,0)/vals.length) : NaN;
      const tr=document.createElement("tr"); tr.innerHTML = `<td>${q.label[state.ui.lang]||q.label.pt}</td><td>${isFinite(avg)?avg.toFixed(2).replace(".",","):"—"}</td>`;
      tb.appendChild(tr);
    });
    const dimCard=document.createElement("div"); dimCard.className="card";
    dimCard.innerHTML = `<h3>${t("dimensions")}</h3>`;
    dimCard.appendChild(tbl);
    card.appendChild(dimCard);

    function calcNPS(values){
      const v = values.filter(n=>typeof n==="number" && !isNaN(n));
      if(!v.length) return {nps:NaN, counts:{pro:0,neu:0,det:0}, total:0};
      let pro=0,neu=0,det=0; v.forEach(n=>{ if(n>=9) pro++; else if(n>=7) neu++; else det++; });
      return { nps: ((pro-det)/v.length)*100, counts:{pro,neu,det}, total:v.length };
    }
    function pct(n, total){ return total? (n/total*100).toFixed(1) : 0; }
  }
  // Helpers for report scope
  function calcNPS(values){
    const v = values.filter(n=>typeof n==="number" && !isNaN(n));
    if(!v.length) return {nps:NaN, counts:{pro:0,neu:0,det:0}, total:0};
    let pro=0,neu=0,det=0; v.forEach(n=>{ if(n>=9) pro++; else if(n>=7) neu++; else det++; });
    return { nps: ((pro-det)/v.length)*100, counts:{pro,neu,det}, total:v.length };
  }

  // Boot
  ensureState();
  render();

  </script>
</body>
</html>